{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport _isEmpty from 'lodash.isempty';\nimport _round from 'lodash.round';\nimport Separator from '../../common/Separator';\nimport SquadMemberStatsHeader from './SquadMemberStatsHeader';\nimport StatRow from './StatRow';\nimport { selectPlayer } from '../../../redux/actions/togetherStatsActions';\nimport { SquadMemberRandomFact } from './SquadMemberRandomFact';\nexport var SquadMemberStats =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SquadMemberStats, _Component);\n\n  function SquadMemberStats() {\n    _classCallCheck(this, SquadMemberStats);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SquadMemberStats).apply(this, arguments));\n  }\n\n  _createClass(SquadMemberStats, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          player = _this$props.player,\n          stats = _this$props.stats,\n          mode = _this$props.mode,\n          perspective = _this$props.perspective,\n          squad = _this$props.squad;\n      var gameMode = mode + perspective;\n\n      if (_isEmpty(stats)) {\n        return '';\n      }\n\n      if (!squad.includes(player)) {\n        this.props.selectPlayer(squad[0]);\n        player = squad[0];\n      }\n\n      var badges = stats[gameMode].stats[player].badges;\n      var playerStats = stats[gameMode].stats[player];\n      var squadStats = stats[gameMode].stats.teamTotal;\n      var gamesPlayed = stats[gameMode].gamesPlayed;\n      return React.createElement(\"div\", {\n        className: \"row  d-flex justify-content-center text-light \"\n      }, React.createElement(\"div\", {\n        className: \"col-lg-8 col-md-10 col-12 text-center\"\n      }, React.createElement(\"div\", {\n        className: \"bg-dark text-light border-secondary stat-card mb-5 rounded-bottom\"\n      }, React.createElement(\"div\", {\n        className: \"card-body\"\n      }, React.createElement(SquadMemberStatsHeader, {\n        player: player,\n        badges: badges\n      }), React.createElement(Separator, {\n        color: \"secondary\",\n        length: 10,\n        margin: 4\n      }), React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(\"div\", {\n        className: \"col-12\"\n      }, React.createElement(StatRow, {\n        label: \"Kills\",\n        playerStat: playerStats.kills,\n        squadStat: squadStats.kills,\n        type: \"total\"\n      }), React.createElement(StatRow, {\n        label: \"K/D\",\n        playerStat: _round(playerStats.kills / gamesPlayed, 2),\n        squadStat: _round(squadStats.kills / (gamesPlayed * squad.length), 2),\n        type: \"avg\"\n      }), React.createElement(StatRow, {\n        label: \"Total Damage\",\n        playerStat: _round(playerStats.damageDealt, 0),\n        squadStat: _round(squadStats.damageDealt, 0),\n        type: \"total\"\n      }), React.createElement(StatRow, {\n        label: \"Avg. Damage\",\n        playerStat: _round(playerStats.damageDealt / gamesPlayed, 0),\n        squadStat: _round(squadStats.damageDealt / (gamesPlayed * squad.length), 0),\n        type: \"avg\"\n      }), React.createElement(StatRow, {\n        label: \"% Headshot Kills\",\n        playerStat: _round(playerStats.headshotKills / playerStats.kills * 100, 1),\n        squadStat: _round(squadStats.headshotKills / squadStats.kills * 100, 1),\n        type: \"avg\",\n        unit: \"%\"\n      }), React.createElement(StatRow, {\n        label: \"Longest Kill\",\n        playerStat: _round(playerStats.longestKill, 0),\n        squadStat: _round(squadStats.longestKill, 0),\n        type: \"distance\",\n        unit: \"m\",\n        nokills: playerStats.kills === 0\n      }))), React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(\"div\", {\n        className: \"col-12\"\n      }, React.createElement(Separator, {\n        color: \"secondary\",\n        length: 10,\n        margin: 4\n      }), React.createElement(SquadMemberRandomFact, {\n        player: player,\n        stats: playerStats,\n        rounds: gamesPlayed\n      })))))));\n    }\n  }]);\n\n  return SquadMemberStats;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    player: state.squad.selectedPlayer,\n    stats: state.squad.stats,\n    mode: state.squad.mode,\n    perspective: state.squad.perspective,\n    squad: state.squad.membersFetched\n  };\n};\n\nvar mapDispatchToProps = {\n  selectPlayer: selectPlayer\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(SquadMemberStats);","map":null,"metadata":{},"sourceType":"module"}