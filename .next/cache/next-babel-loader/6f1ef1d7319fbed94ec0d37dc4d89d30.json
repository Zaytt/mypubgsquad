{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport SelectorPill from './SelectorPill';\nimport { setGameMode, setPerspective, getPlayerSeasons } from '../../../redux/actions/playerSeasonsActions';\n\nvar GameModeSelector =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GameModeSelector, _Component);\n\n  function GameModeSelector() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, GameModeSelector);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GameModeSelector)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"changeGameMode\", function (mode) {\n      return _this.props.setGameMode(mode);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changePerspective\", function (perspective) {\n      return _this.props.setPerspective(perspective);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renew\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _this$props, squad, season, route;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$props = _this.props, squad = _this$props.squad, season = _this$props.season;\n              route = \"/api/stats?squad=\".concat(squad.join(','), \"&seasonid=\").concat(season);\n              _context.next = 4;\n              return axios.get('/api/stats/cache/clear/', {\n                params: {\n                  target: route\n                }\n              });\n\n            case 4:\n              _this.props.getPlayersStats(squad.join(','), season);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    return _this;\n  }\n\n  _createClass(GameModeSelector, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          mode = _this$props2.mode,\n          perspective = _this$props2.perspective;\n      return React.createElement(\"div\", {\n        className: \"row mb-3 d-flex \"\n      }, React.createElement(\"div\", {\n        className: \"col-md-6 mb-2\"\n      }, React.createElement(\"div\", {\n        className: \"row justify-content-md-end\"\n      }, React.createElement(\"div\", {\n        className: \"col-lg-6 d-flex  justify-content-center\"\n      }, React.createElement(\"ul\", {\n        className: \"nav nav-pills nav-fill nav-justified w-100 border border-dark rounded\"\n      }, React.createElement(SelectorPill, {\n        selected: mode === 'solo' ? true : false,\n        rounded: ['left'],\n        text: \"Solo\",\n        activeColor: \"warning\",\n        inactiveColor: \"secondary\",\n        onClick: function onClick() {\n          return _this2.changeGameMode('solo');\n        }\n      }), React.createElement(SelectorPill, {\n        selected: mode === 'duo' ? true : false,\n        text: \"Duo\",\n        activeColor: \"warning\",\n        inactiveColor: \"secondary\",\n        onClick: function onClick() {\n          return _this2.changeGameMode('duo');\n        }\n      }), React.createElement(SelectorPill, {\n        selected: mode === 'squad' ? true : false,\n        text: \"Squad\",\n        rounded: ['right'],\n        activeColor: \"warning\",\n        inactiveColor: \"secondary\",\n        onClick: function onClick() {\n          return _this2.changeGameMode('squad');\n        }\n      }))))), React.createElement(\"div\", {\n        className: \"col-md-6 mb-2\"\n      }, React.createElement(\"div\", {\n        className: \"row justify-content-start\"\n      }, React.createElement(\"div\", {\n        className: \"col-lg-6 mb-2\"\n      }, React.createElement(\"ul\", {\n        className: \"nav nav-pills nav-fill nav-justified w-100 d-flex border border-dark rounded\"\n      }, React.createElement(SelectorPill, {\n        selected: perspective === 'FPP' ? true : false,\n        text: \"FPP\",\n        rounded: ['left'],\n        activeColor: \"warning\",\n        inactiveColor: \"secondary\",\n        onClick: function onClick() {\n          return _this2.changePerspective('FPP');\n        }\n      }), React.createElement(SelectorPill, {\n        selected: perspective === '' ? true : false,\n        text: \"TPP\",\n        rounded: ['right'],\n        activeColor: \"warning\",\n        inactiveColor: \"secondary\",\n        onClick: function onClick() {\n          return _this2.changePerspective('');\n        }\n      }))))));\n    }\n  }]);\n\n  return GameModeSelector;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    mode: state.playerSeasons.mode,\n    perspective: state.playerSeasons.perspective,\n    season: state.playerSeasons.season,\n    squad: state.playerSeasons.players\n  };\n};\n\nvar mapDispatchToProps = {\n  setGameMode: setGameMode,\n  setPerspective: setPerspective,\n  getPlayerSeasons: getPlayerSeasons\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(GameModeSelector);","map":null,"metadata":{},"sourceType":"module"}