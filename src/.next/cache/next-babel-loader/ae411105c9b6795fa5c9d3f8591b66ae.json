{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport _difference from 'lodash.difference';\nimport _without from 'lodash.without';\nimport _concat from 'lodash.concat';\nimport _omit from 'lodash.omit';\nimport { connect } from 'react-redux';\nimport { setSquadMembers, setSquadMembersColors } from '../../../redux/actions/togetherStatsActions';\n\nvar PlayerPicker =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PlayerPicker, _Component);\n\n  function PlayerPicker() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PlayerPicker);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PlayerPicker)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      inactiveColor: 'btn-secondary'\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onButtonClick\", function (ref, playerName) {\n      var button = _this.refs[ref];\n\n      if (button.classList.contains('selected')) {\n        _this.deactivateButton(button, playerName); // Remove player from the squad in the store\n\n\n        _this.props.setSquadMembers(_without(_this.props.membersPicked, button.value));\n      } else {\n        if (_Object$keys(_this.props.membersColors).length >= 4) {\n          return;\n        } else {\n          _this.activateButton(button, playerName); // Add player to the squad in the store\n\n\n          _this.props.setSquadMembers(_concat(_this.props.membersPicked, button.value));\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"activateButton\", function (button, playerName) {\n      var color = _this.getColor();\n\n      _this.addColor(color, playerName);\n\n      button.classList.remove(_this.state.inactiveColor);\n      button.classList.add(\"btn-\".concat(color), 'selected', 'border', 'border-dark');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"deactivateButton\", function (button, playerName) {\n      var colorClass = button.classList.contains('btn-primary') ? 'btn-primary' : button.classList.contains('btn-danger') ? 'btn-danger' : button.classList.contains('btn-success') ? 'btn-success' : button.classList.contains('btn-info') ? 'btn-info' : '';\n\n      _this.removeColor(playerName);\n\n      button.classList.remove(colorClass, 'selected', 'border', 'border-dark');\n      button.classList.add(_this.state.inactiveColor);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderButtons\", function (players) {\n      if (players) return players.map(function (playerName, index) {\n        var button = _this.refs[\"button\".concat(index)];\n\n        var disabled = button ? !button.classList.contains('selected') && _Object$keys(_this.props.membersColors).length === 4 ? 'disabled' : null : '';\n        var color = _this.props.membersColors.hasOwnProperty(playerName) ? \"btn-\".concat(_this.props.membersColors[playerName], \" border border-dark selected\") : 'btn-secondary';\n        return React.createElement(\"button\", {\n          type: \"button\",\n          key: index,\n          value: playerName,\n          ref: \"button\".concat(index),\n          className: \"btn btn-sm m-1 \".concat(color, \" \").concat(disabled),\n          onClick: disabled ? null : function () {\n            return _this.onButtonClick(\"button\".concat(index), playerName);\n          }\n        }, playerName);\n      });else return '';\n    });\n\n    return _this;\n  }\n\n  _createClass(PlayerPicker, [{\n    key: \"getColor\",\n    // Returns the first unused color\n    value: function getColor() {\n      var colors = ['primary', 'danger', 'success', 'info'];\n\n      var usedColors = _Object$values(this.props.membersColors);\n\n      var diff = _difference(colors, usedColors);\n\n      return diff.length >= 1 ? diff[0] : '';\n    } // Turns on and off a button color and adds/removes a player from the squad to search\n\n  }, {\n    key: \"addColor\",\n    // Set the state of this color as true, which means it is in use\n    value: function addColor(color, playerName) {\n      this.props.setSquadMembersColors(_objectSpread({}, this.props.membersColors, _defineProperty({}, playerName, color)));\n    } // Set the state of this color as false, which means it is available\n\n  }, {\n    key: \"removeColor\",\n    value: function removeColor(playerName) {\n      this.props.setSquadMembersColors(_omit(this.props.membersColors, playerName));\n    } // Renders the buttons for the players\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var players = this.props.players;\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"row mb-4 d-flex justify-content-center\"\n      }, React.createElement(\"div\", {\n        className: \"col-md-10 col-12 text-center \"\n      }, React.createElement(\"h5\", {\n        className: \"text-dark\"\n      }, \"Pick up to 4 squad members to look for their stats together:\"), React.createElement(\"br\", null), React.createElement(\"br\", null), this.renderButtons(players))));\n    }\n  }]);\n\n  return PlayerPicker;\n}(Component);\n\n_defineProperty(PlayerPicker, \"propTypes\", {\n  players: PropTypes.array.isRequired\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    players: state.playerSeasons.players,\n    membersPicked: state.squad.membersPicked,\n    membersColors: state.squad.membersColors\n  };\n};\n\nvar mapDispatchToProps = {\n  setSquadMembers: setSquadMembers,\n  setSquadMembersColors: setSquadMembersColors\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayerPicker);","map":{"version":3,"sources":["/Users/ivan/Documents/Developer/Portfolio-Projects/mypubgsquad/mypubgsquad-next/src/components/stats_page/SquadStats/PlayerPicker.js"],"names":["React","Component","PropTypes","_difference","_without","_concat","_omit","connect","setSquadMembers","setSquadMembersColors","PlayerPicker","inactiveColor","ref","playerName","button","refs","classList","contains","deactivateButton","props","membersPicked","value","membersColors","length","activateButton","color","getColor","addColor","remove","state","add","colorClass","removeColor","players","map","index","disabled","hasOwnProperty","onButtonClick","colors","usedColors","diff","renderButtons","array","isRequired","mapStateToProps","playerSeasons","squad","mapDispatchToProps"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SACEC,eADF,EAEEC,qBAFF,QAGO,6CAHP;;IAKMC,Y;;;;;;;;;;;;;;;;;;4DAKI;AACNC,MAAAA,aAAa,EAAE;AADT,K;;oEAaQ,UAACC,GAAD,EAAMC,UAAN,EAAqB;AACnC,UAAIC,MAAM,GAAG,MAAKC,IAAL,CAAUH,GAAV,CAAb;;AACA,UAAIE,MAAM,CAACE,SAAP,CAAiBC,QAAjB,CAA0B,UAA1B,CAAJ,EAA2C;AACzC,cAAKC,gBAAL,CAAsBJ,MAAtB,EAA8BD,UAA9B,EADyC,CAEzC;;;AACA,cAAKM,KAAL,CAAWX,eAAX,CAA2BJ,QAAQ,CAAC,MAAKe,KAAL,CAAWC,aAAZ,EAA2BN,MAAM,CAACO,KAAlC,CAAnC;AACD,OAJD,MAIO;AACL,YAAI,aAAY,MAAKF,KAAL,CAAWG,aAAvB,EAAsCC,MAAtC,IAAgD,CAApD,EAAuD;AACrD;AACD,SAFD,MAEO;AACL,gBAAKC,cAAL,CAAoBV,MAApB,EAA4BD,UAA5B,EADK,CAEL;;;AACA,gBAAKM,KAAL,CAAWX,eAAX,CAA2BH,OAAO,CAAC,MAAKc,KAAL,CAAWC,aAAZ,EAA2BN,MAAM,CAACO,KAAlC,CAAlC;AACD;AACF;AACF,K;;qEAGgB,UAACP,MAAD,EAASD,UAAT,EAAwB;AACvC,UAAIY,KAAK,GAAG,MAAKC,QAAL,EAAZ;;AACA,YAAKC,QAAL,CAAcF,KAAd,EAAqBZ,UAArB;;AACAC,MAAAA,MAAM,CAACE,SAAP,CAAiBY,MAAjB,CAAwB,MAAKC,KAAL,CAAWlB,aAAnC;AACAG,MAAAA,MAAM,CAACE,SAAP,CAAiBc,GAAjB,eAA4BL,KAA5B,GAAqC,UAArC,EAAiD,QAAjD,EAA2D,aAA3D;AACD,K;;uEAGkB,UAACX,MAAD,EAASD,UAAT,EAAwB;AACzC,UAAIkB,UAAU,GAAGjB,MAAM,CAACE,SAAP,CAAiBC,QAAjB,CAA0B,aAA1B,IACb,aADa,GAEbH,MAAM,CAACE,SAAP,CAAiBC,QAAjB,CAA0B,YAA1B,IACA,YADA,GAEAH,MAAM,CAACE,SAAP,CAAiBC,QAAjB,CAA0B,aAA1B,IACA,aADA,GAEAH,MAAM,CAACE,SAAP,CAAiBC,QAAjB,CAA0B,UAA1B,IACA,UADA,GAEA,EARJ;;AASA,YAAKe,WAAL,CAAiBnB,UAAjB;;AACAC,MAAAA,MAAM,CAACE,SAAP,CAAiBY,MAAjB,CAAwBG,UAAxB,EAAoC,UAApC,EAAgD,QAAhD,EAA0D,aAA1D;AACAjB,MAAAA,MAAM,CAACE,SAAP,CAAiBc,GAAjB,CAAqB,MAAKD,KAAL,CAAWlB,aAAhC;AACD,K;;oEAae,UAAAsB,OAAO,EAAI;AACzB,UAAIA,OAAJ,EACE,OAAOA,OAAO,CAACC,GAAR,CAAY,UAACrB,UAAD,EAAasB,KAAb,EAAuB;AACxC,YAAIrB,MAAM,GAAG,MAAKC,IAAL,iBAAmBoB,KAAnB,EAAb;;AACA,YAAIC,QAAQ,GAAGtB,MAAM,GACjB,CAACA,MAAM,CAACE,SAAP,CAAiBC,QAAjB,CAA0B,UAA1B,CAAD,IACA,aAAY,MAAKE,KAAL,CAAWG,aAAvB,EAAsCC,MAAtC,KAAiD,CADjD,GAEE,UAFF,GAGE,IAJe,GAKjB,EALJ;AAOA,YAAIE,KAAK,GAAG,MAAKN,KAAL,CAAWG,aAAX,CAAyBe,cAAzB,CAAwCxB,UAAxC,kBACD,MAAKM,KAAL,CAAWG,aAAX,CAAyBT,UAAzB,CADC,oCAER,eAFJ;AAGA,eACE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,GAAG,EAAEsB,KAFP;AAGE,UAAA,KAAK,EAAEtB,UAHT;AAIE,UAAA,GAAG,kBAAWsB,KAAX,CAJL;AAKE,UAAA,SAAS,2BAAoBV,KAApB,cAA6BW,QAA7B,CALX;AAME,UAAA,OAAO,EAAEA,QAAQ,GAAG,IAAH,GAAU;AAAA,mBAAM,MAAKE,aAAL,iBAA4BH,KAA5B,GAAqCtB,UAArC,CAAN;AAAA;AAN7B,WAQGA,UARH,CADF;AAYD,OAxBM,CAAP,CADF,KA0BK,OAAO,EAAP;AACN,K;;;;;;;AAzFD;+BACW;AACT,UAAM0B,MAAM,GAAG,CAAC,SAAD,EAAY,QAAZ,EAAsB,SAAtB,EAAiC,MAAjC,CAAf;;AACA,UAAMC,UAAU,GAAG,eAAc,KAAKrB,KAAL,CAAWG,aAAzB,CAAnB;;AACA,UAAImB,IAAI,GAAGtC,WAAW,CAACoC,MAAD,EAASC,UAAT,CAAtB;;AACA,aAAOC,IAAI,CAAClB,MAAL,IAAe,CAAf,GAAmBkB,IAAI,CAAC,CAAD,CAAvB,GAA6B,EAApC;AACD,K,CAED;;;;AA0CA;6BACShB,K,EAAOZ,U,EAAY;AAC1B,WAAKM,KAAL,CAAWV,qBAAX,mBAAsC,KAAKU,KAAL,CAAWG,aAAjD,sBAAsET,UAAtE,EAAmFY,KAAnF;AACD,K,CAED;;;;gCACYZ,U,EAAY;AACtB,WAAKM,KAAL,CAAWV,qBAAX,CAAiCH,KAAK,CAAC,KAAKa,KAAL,CAAWG,aAAZ,EAA2BT,UAA3B,CAAtC;AACD,K,CAED;;;;6BA+BS;AAAA,UACCoB,OADD,GACa,KAAKd,KADlB,CACCc,OADD;AAEP,aACE,oBAAC,KAAD,CAAO,QAAP,QACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAI,QAAA,SAAS,EAAC;AAAd,wEADF,EAIE,+BAJF,EAKE,+BALF,EAMG,KAAKS,aAAL,CAAmBT,OAAnB,CANH,CADF,CADF,CADF;AAcD;;;;EApHwBhC,S;;gBAArBS,Y,eACe;AACjBuB,EAAAA,OAAO,EAAE/B,SAAS,CAACyC,KAAV,CAAgBC;AADR,C;;AAsHrB,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAhB,KAAK;AAAA,SAAK;AAChCI,IAAAA,OAAO,EAAEJ,KAAK,CAACiB,aAAN,CAAoBb,OADG;AAEhCb,IAAAA,aAAa,EAAES,KAAK,CAACkB,KAAN,CAAY3B,aAFK;AAGhCE,IAAAA,aAAa,EAAEO,KAAK,CAACkB,KAAN,CAAYzB;AAHK,GAAL;AAAA,CAA7B;;AAMA,IAAM0B,kBAAkB,GAAG;AAAExC,EAAAA,eAAe,EAAfA,eAAF;AAAmBC,EAAAA,qBAAqB,EAArBA;AAAnB,CAA3B;AAEA,eAAeF,OAAO,CACpBsC,eADoB,EAEpBG,kBAFoB,CAAP,CAGbtC,YAHa,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport _difference from 'lodash.difference';\nimport _without from 'lodash.without';\nimport _concat from 'lodash.concat';\nimport _omit from 'lodash.omit';\nimport { connect } from 'react-redux';\nimport {\n  setSquadMembers,\n  setSquadMembersColors\n} from '../../../redux/actions/togetherStatsActions';\n\nclass PlayerPicker extends Component {\n  static propTypes = {\n    players: PropTypes.array.isRequired\n  };\n\n  state = {\n    inactiveColor: 'btn-secondary'\n  };\n\n  // Returns the first unused color\n  getColor() {\n    const colors = ['primary', 'danger', 'success', 'info'];\n    const usedColors = Object.values(this.props.membersColors);\n    let diff = _difference(colors, usedColors);\n    return diff.length >= 1 ? diff[0] : '';\n  }\n\n  // Turns on and off a button color and adds/removes a player from the squad to search\n  onButtonClick = (ref, playerName) => {\n    let button = this.refs[ref];\n    if (button.classList.contains('selected')) {\n      this.deactivateButton(button, playerName);\n      // Remove player from the squad in the store\n      this.props.setSquadMembers(_without(this.props.membersPicked, button.value));\n    } else {\n      if (Object.keys(this.props.membersColors).length >= 4) {\n        return;\n      } else {\n        this.activateButton(button, playerName);\n        // Add player to the squad in the store\n        this.props.setSquadMembers(_concat(this.props.membersPicked, button.value));\n      }\n    }\n  };\n\n  // Removes the inactive background class and adds the available color class to a button\n  activateButton = (button, playerName) => {\n    let color = this.getColor();\n    this.addColor(color, playerName);\n    button.classList.remove(this.state.inactiveColor);\n    button.classList.add(`btn-${color}`, 'selected', 'border', 'border-dark');\n  };\n\n  // Removes the active background class and adds the inactive color class to a button\n  deactivateButton = (button, playerName) => {\n    let colorClass = button.classList.contains('btn-primary')\n      ? 'btn-primary'\n      : button.classList.contains('btn-danger')\n      ? 'btn-danger'\n      : button.classList.contains('btn-success')\n      ? 'btn-success'\n      : button.classList.contains('btn-info')\n      ? 'btn-info'\n      : '';\n    this.removeColor(playerName);\n    button.classList.remove(colorClass, 'selected', 'border', 'border-dark');\n    button.classList.add(this.state.inactiveColor);\n  };\n\n  // Set the state of this color as true, which means it is in use\n  addColor(color, playerName) {\n    this.props.setSquadMembersColors({ ...this.props.membersColors, ...{ [playerName]: color } });\n  }\n\n  // Set the state of this color as false, which means it is available\n  removeColor(playerName) {\n    this.props.setSquadMembersColors(_omit(this.props.membersColors, playerName));\n  }\n\n  // Renders the buttons for the players\n  renderButtons = players => {\n    if (players)\n      return players.map((playerName, index) => {\n        let button = this.refs[`button${index}`];\n        let disabled = button\n          ? !button.classList.contains('selected') &&\n            Object.keys(this.props.membersColors).length === 4\n            ? 'disabled'\n            : null\n          : '';\n\n        let color = this.props.membersColors.hasOwnProperty(playerName)\n          ? `btn-${this.props.membersColors[playerName]} border border-dark selected`\n          : 'btn-secondary';\n        return (\n          <button\n            type=\"button\"\n            key={index}\n            value={playerName}\n            ref={`button${index}`}\n            className={`btn btn-sm m-1 ${color} ${disabled}`}\n            onClick={disabled ? null : () => this.onButtonClick(`button${index}`, playerName)}\n          >\n            {playerName}\n          </button>\n        );\n      });\n    else return '';\n  };\n\n  render() {\n    const { players } = this.props;\n    return (\n      <React.Fragment>\n        <div className=\"row mb-4 d-flex justify-content-center\">\n          <div className=\"col-md-10 col-12 text-center \">\n            <h5 className=\"text-dark\">\n              Pick up to 4 squad members to look for their stats together:\n            </h5>\n            <br />\n            <br />\n            {this.renderButtons(players)}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  players: state.playerSeasons.players,\n  membersPicked: state.squad.membersPicked,\n  membersColors: state.squad.membersColors\n});\n\nconst mapDispatchToProps = { setSquadMembers, setSquadMembersColors };\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PlayerPicker);\n"]},"metadata":{},"sourceType":"module"}