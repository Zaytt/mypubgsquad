{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\n/* LIBRARIES */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport SwipeableViews from 'react-swipeable-views'; // import { Spring } from 'react-spring/renderprops';\n\n/* COMPONENTS */\n\nimport Separator from '../common/Separator';\nimport Spinner from '../common/Spinner';\nimport Error from '../common/Error';\nimport AloneTogetherPicker from './AloneTogetherPicker';\nimport IndividualStats from './GeneralStats/IndividualStats';\nimport TogetherStats from './SquadStats/TogetherStats';\n/* REDUX ACTIONS */\n\nimport { getPlayerSeasons, getCurrentSeason } from '../../redux/actions/playerSeasonsActions';\n/* HELPER FUNCTIONS */\n\nimport { sanitizeString } from '../../util/Util';\n\nvar StatsDashboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StatsDashboard, _Component);\n\n  function StatsDashboard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StatsDashboard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StatsDashboard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      alone: true,\n      squad: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"fetchPlayerSeasons\", function () {\n      var squadMates = sanitizeString(_this.props.squad).split(',').filter(function (el) {\n        return el != null;\n      }).join(',');\n\n      _this.setState({\n        squad: squadMates\n      });\n\n      _this.props.getPlayerSeasons(squadMates, _this.props.season);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setAlone\", function (status) {\n      _this.setState({\n        alone: status\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderStats\", function () {\n      var index = _this.state.alone ? 0 : 1;\n      return React.createElement(SwipeableViews, {\n        index: index\n      }, React.createElement(IndividualStats, null), React.createElement(TogetherStats, null));\n    });\n\n    return _this;\n  }\n\n  _createClass(StatsDashboard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchPlayerSeasons();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevState.squad !== this.state.squad) this.fetchPlayerSeasons();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          loading = _this$props.loading,\n          error = _this$props.error;\n      var alone = this.state.alone;\n      return React.createElement(\"div\", {\n        className: \"squadStats\"\n      }, React.createElement(\"div\", {\n        className: \"container\"\n      }, React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(\"div\", {\n        className: \"col-md-12 my-4\"\n      }, loading ? React.createElement(Spinner, null) : error ? React.createElement(Error, {\n        error: error,\n        message: \"Oops! Something went wrong while fetching your squad's data, please try again later\",\n        retry: this.fetchPlayerSeasons\n      }) : React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n        className: \"display-3 text-center pubg-font text-black mb-4\"\n      }, \"Your Squad this season\"), React.createElement(AloneTogetherPicker, {\n        setAlone: this.setAlone,\n        alone: alone\n      }), React.createElement(Separator, {\n        color: \"dark\",\n        length: \"10\",\n        marginTop: \"1\",\n        marginBottom: \"3\"\n      }), this.renderStats())))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var newSquadMates = sanitizeString(nextProps.squad).split(',').filter(function (el) {\n        return el != null;\n      }).join(',');\n\n      if (newSquadMates !== prevState.squad) {\n        return {\n          squad: newSquadMates\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return StatsDashboard;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    players: state.playerSeasons.players,\n    squadStats: state.playerSeasons.stats,\n    loading: state.playerSeasons.loading,\n    season: state.playerSeasons.season,\n    error: state.playerSeasons.error\n  };\n};\n\nvar mapDispatchToProps = {\n  getPlayerSeasons: getPlayerSeasons,\n  getCurrentSeason: getCurrentSeason\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(StatsDashboard);","map":{"version":3,"sources":["/Users/ivan/Documents/Developer/Portfolio-Projects/mypubgsquad/mypubgsquad-next/src/components/stats_page/index.js"],"names":["React","Component","connect","SwipeableViews","Separator","Spinner","Error","AloneTogetherPicker","IndividualStats","TogetherStats","getPlayerSeasons","getCurrentSeason","sanitizeString","StatsDashboard","alone","squad","squadMates","props","split","filter","el","join","setState","season","status","index","state","fetchPlayerSeasons","prevProps","prevState","loading","error","setAlone","renderStats","nextProps","newSquadMates","mapStateToProps","players","playerSeasons","squadStats","stats","mapDispatchToProps"],"mappings":"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","sourcesContent":["/* LIBRARIES */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport SwipeableViews from 'react-swipeable-views';\n// import { Spring } from 'react-spring/renderprops';\n\n/* COMPONENTS */\nimport Separator from '../common/Separator';\nimport Spinner from '../common/Spinner';\nimport Error from '../common/Error';\nimport AloneTogetherPicker from './AloneTogetherPicker';\nimport IndividualStats from './GeneralStats/IndividualStats';\nimport TogetherStats from './SquadStats/TogetherStats';\n\n/* REDUX ACTIONS */\nimport { getPlayerSeasons, getCurrentSeason } from '../../redux/actions/playerSeasonsActions';\n\n/* HELPER FUNCTIONS */\nimport { sanitizeString } from '../../util/Util';\n\nclass StatsDashboard extends Component {\n  state = {\n    alone: true,\n    squad: ''\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    let newSquadMates = sanitizeString(nextProps.squad)\n      .split(',')\n      .filter(el => {\n        return el != null;\n      })\n      .join(',');\n    if (newSquadMates !== prevState.squad) {\n      return { squad: newSquadMates };\n    }\n    return null;\n  }\n\n  componentDidMount() {\n    this.fetchPlayerSeasons();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.squad !== this.state.squad) this.fetchPlayerSeasons();\n  }\n\n  fetchPlayerSeasons = () => {\n    const squadMates = sanitizeString(this.props.squad)\n      .split(',')\n      .filter(el => {\n        return el != null;\n      })\n      .join(',');\n\n    this.setState({ squad: squadMates });\n    this.props.getPlayerSeasons(squadMates, this.props.season);\n  };\n\n  setAlone = status => {\n    this.setState({ alone: status });\n  };\n\n  renderStats = () => {\n    let index = this.state.alone ? 0 : 1;\n    return (\n      <SwipeableViews index={index}>\n        <IndividualStats />\n        <TogetherStats />\n      </SwipeableViews>\n    );\n  };\n\n  render() {\n    const { loading, error } = this.props;\n    const { alone } = this.state;\n    return (\n      <div className=\"squadStats\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-12 my-4\">\n              {loading ? (\n                <Spinner />\n              ) : error ? (\n                <Error\n                  error={error}\n                  message={`Oops! Something went wrong while fetching your squad's data, please try again later`}\n                  retry={this.fetchPlayerSeasons}\n                />\n              ) : (\n                <React.Fragment>\n                  <h1 className=\"display-3 text-center pubg-font text-black mb-4\">\n                    Your Squad this season\n                  </h1>\n                  <AloneTogetherPicker setAlone={this.setAlone} alone={alone} />\n                  <Separator color=\"dark\" length=\"10\" marginTop=\"1\" marginBottom=\"3\" />\n                  {this.renderStats()}\n                </React.Fragment>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  players: state.playerSeasons.players,\n  squadStats: state.playerSeasons.stats,\n  loading: state.playerSeasons.loading,\n  season: state.playerSeasons.season,\n  error: state.playerSeasons.error\n});\n\nconst mapDispatchToProps = {\n  getPlayerSeasons,\n  getCurrentSeason\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(StatsDashboard);\n"]},"metadata":{},"sourceType":"module"}