{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport _difference from 'lodash.difference';\nimport _without from 'lodash.without';\nimport _concat from 'lodash.concat';\nimport _omit from 'lodash.omit';\nimport { connect } from 'react-redux';\nimport { setSquadMembers, setSquadMembersColors } from '../../../redux/actions/togetherStatsActions';\n\nvar PlayerPicker =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PlayerPicker, _Component);\n\n  function PlayerPicker() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PlayerPicker);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PlayerPicker)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      inactiveColor: 'btn-secondary'\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onButtonClick\", function (ref, playerName) {\n      var button = _this.refs[ref];\n\n      if (button.classList.contains('selected')) {\n        _this.deactivateButton(button, playerName); // Remove player from the squad in the store\n\n\n        _this.props.setSquadMembers(_without(_this.props.membersPicked, button.value));\n      } else {\n        if (_Object$keys(_this.props.membersColors).length >= 4) {\n          return;\n        } else {\n          _this.activateButton(button, playerName); // Add player to the squad in the store\n\n\n          _this.props.setSquadMembers(_concat(_this.props.membersPicked, button.value));\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"activateButton\", function (button, playerName) {\n      var color = _this.getColor();\n\n      _this.addColor(color, playerName);\n\n      button.classList.remove(_this.state.inactiveColor);\n      button.classList.add(\"btn-\".concat(color), 'selected', 'border', 'border-dark');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"deactivateButton\", function (button, playerName) {\n      var colorClass = button.classList.contains('btn-primary') ? 'btn-primary' : button.classList.contains('btn-danger') ? 'btn-danger' : button.classList.contains('btn-success') ? 'btn-success' : button.classList.contains('btn-info') ? 'btn-info' : '';\n\n      _this.removeColor(playerName);\n\n      button.classList.remove(colorClass, 'selected', 'border', 'border-dark');\n      button.classList.add(_this.state.inactiveColor);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderButtons\", function (players) {\n      if (players) return players.map(function (playerName, index) {\n        var button = _this.refs[\"button\".concat(index)];\n\n        var disabled = button ? !button.classList.contains('selected') && _Object$keys(_this.props.membersColors).length === 4 ? 'disabled' : null : '';\n        var color = _this.props.membersColors.hasOwnProperty(playerName) ? \"btn-\".concat(_this.props.membersColors[playerName], \" border border-dark selected\") : 'btn-secondary';\n        return React.createElement(\"button\", {\n          type: \"button\",\n          key: index,\n          value: playerName,\n          ref: \"button\".concat(index),\n          className: \"btn btn-sm m-1 \".concat(color, \" \").concat(disabled),\n          onClick: disabled ? null : function () {\n            return _this.onButtonClick(\"button\".concat(index), playerName);\n          }\n        }, playerName);\n      });else return '';\n    });\n\n    return _this;\n  }\n\n  _createClass(PlayerPicker, [{\n    key: \"getColor\",\n    // Returns the first unused color\n    value: function getColor() {\n      var colors = ['primary', 'danger', 'success', 'info'];\n\n      var usedColors = _Object$values(this.props.membersColors);\n\n      var diff = _difference(colors, usedColors);\n\n      return diff.length >= 1 ? diff[0] : '';\n    } // Turns on and off a button color and adds/removes a player from the squad to search\n\n  }, {\n    key: \"addColor\",\n    // Set the state of this color as true, which means it is in use\n    value: function addColor(color, playerName) {\n      this.props.setSquadMembersColors(_objectSpread({}, this.props.membersColors, _defineProperty({}, playerName, color)));\n    } // Set the state of this color as false, which means it is available\n\n  }, {\n    key: \"removeColor\",\n    value: function removeColor(playerName) {\n      this.props.setSquadMembersColors(_omit(this.props.membersColors, playerName));\n    } // Renders the buttons for the players\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var players = this.props.players;\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"row mb-4 d-flex justify-content-center\"\n      }, React.createElement(\"div\", {\n        className: \"col-md-10 col-12 text-center \"\n      }, React.createElement(\"h5\", {\n        className: \"text-dark\"\n      }, \"Pick up to 4 squad members to look for their stats together:\"), React.createElement(\"br\", null), React.createElement(\"br\", null), this.renderButtons(players))));\n    }\n  }]);\n\n  return PlayerPicker;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    players: state.playerSeasons.players,\n    membersPicked: state.squad.membersPicked,\n    membersColors: state.squad.membersColors\n  };\n};\n\nvar mapDispatchToProps = {\n  setSquadMembers: setSquadMembers,\n  setSquadMembersColors: setSquadMembersColors\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayerPicker);","map":null,"metadata":{},"sourceType":"module"}