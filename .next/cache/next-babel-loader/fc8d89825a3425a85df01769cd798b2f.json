{"ast":null,"code":"import axios from 'axios';\nimport { GET_PLAYER_SEASONS, LOADING_STATS, SET_GAME_MODE, SET_SEASON, SET_PERSPECTIVE, SET_ERROR } from './types'; // Get the individual info of each of the squad members\n\nexport var getPlayerSeasons = function getPlayerSeasons(squad, seasonid, refresh) {\n  return function (dispatch, getState) {\n    dispatch(setStatsLoading());\n\n    if (squad.split(',').length < 2) {\n      dispatch({\n        type: SET_ERROR,\n        payload: 'InsufficientPlayers'\n      });\n    } else {\n      axios.get('/api/stats', {\n        params: {\n          squad: squad,\n          seasonid: seasonid,\n          refresh: refresh\n        }\n      }).then(function (res) {\n        var payload = {\n          stats: res.data,\n          players: res.data.map(function (p) {\n            return p.relationships.player.attributes.name;\n          }),\n          season: res.data[0].relationships.season.id\n        };\n        dispatch({\n          type: GET_PLAYER_SEASONS,\n          payload: payload\n        });\n      })[\"catch\"](function (err) {\n        dispatch({\n          type: SET_ERROR,\n          payload: err.response.data\n        });\n      });\n    }\n  };\n};\nexport var setGameMode = function setGameMode(mode) {\n  return function (dispatch) {\n    dispatch({\n      type: SET_GAME_MODE,\n      payload: mode\n    });\n  };\n};\nexport var setPerspective = function setPerspective(perspective) {\n  return function (dispatch) {\n    dispatch({\n      type: SET_PERSPECTIVE,\n      payload: perspective\n    });\n  };\n};\nexport var getCurrentSeason = function getCurrentSeason() {\n  return function (dispatch) {\n    axios.get('/api/seasons/current').then(function (res) {\n      dispatch({\n        type: SET_SEASON,\n        payload: res.data.id\n      });\n    })[\"catch\"](function (err) {\n      dispatch({\n        type: SET_SEASON,\n        payload: ''\n      });\n    });\n  };\n};\nexport var setStatsLoading = function setStatsLoading() {\n  return {\n    type: LOADING_STATS\n  };\n};","map":{"version":3,"sources":["/Users/ivan/Documents/Developer/Portfolio-Projects/mypubgsquad/mypubgsquad-next/redux/actions/playerSeasonsActions.js"],"names":["axios","GET_PLAYER_SEASONS","LOADING_STATS","SET_GAME_MODE","SET_SEASON","SET_PERSPECTIVE","SET_ERROR","getPlayerSeasons","squad","seasonid","refresh","dispatch","getState","setStatsLoading","split","length","type","payload","get","params","then","res","stats","data","players","map","p","relationships","player","attributes","name","season","id","err","response","setGameMode","mode","setPerspective","perspective","getCurrentSeason"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nimport {\n  GET_PLAYER_SEASONS,\n  LOADING_STATS,\n  SET_GAME_MODE,\n  SET_SEASON,\n  SET_PERSPECTIVE,\n  SET_ERROR\n} from './types';\n\n// Get the individual info of each of the squad members\nexport const getPlayerSeasons = (squad, seasonid, refresh) => (dispatch, getState) => {\n  dispatch(setStatsLoading());\n\n  if (squad.split(',').length < 2) {\n    dispatch({\n      type: SET_ERROR,\n      payload: 'InsufficientPlayers'\n    });\n  } else {\n    axios\n      .get('/api/stats', {\n        params: {\n          squad,\n          seasonid,\n          refresh\n        }\n      })\n      .then(res => {\n        let payload = {\n          stats: res.data,\n          players: res.data.map(p => p.relationships.player.attributes.name),\n          season: res.data[0].relationships.season.id\n        };\n        dispatch({\n          type: GET_PLAYER_SEASONS,\n          payload: payload\n        });\n      })\n      .catch(err => {\n        dispatch({\n          type: SET_ERROR,\n          payload: err.response.data\n        });\n      });\n  }\n};\n\nexport const setGameMode = mode => dispatch => {\n  dispatch({\n    type: SET_GAME_MODE,\n    payload: mode\n  });\n};\n\nexport const setPerspective = perspective => dispatch => {\n  dispatch({\n    type: SET_PERSPECTIVE,\n    payload: perspective\n  });\n};\n\nexport const getCurrentSeason = () => dispatch => {\n  axios\n    .get('/api/seasons/current')\n    .then(res => {\n      dispatch({\n        type: SET_SEASON,\n        payload: res.data.id\n      });\n    })\n    .catch(err => {\n      dispatch({\n        type: SET_SEASON,\n        payload: ''\n      });\n    });\n};\n\nexport const setStatsLoading = () => {\n  return {\n    type: LOADING_STATS\n  };\n};\n"]},"metadata":{},"sourceType":"module"}