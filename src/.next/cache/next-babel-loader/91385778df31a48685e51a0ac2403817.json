{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { GET_PLAYER_SEASONS, REFRESH_PLAYER_SEASONS, LOADING_STATS, SET_GAME_MODE, SET_PERSPECTIVE, SET_SEASON, SET_ERROR } from '../actions/types';\nvar initialState = {\n  players: [],\n  stats: [],\n  mode: 'squad',\n  perspective: 'FPP',\n  season: '',\n  loading: false,\n  error: null\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case GET_PLAYER_SEASONS:\n      return _objectSpread({}, state, {\n        stats: payload.stats,\n        season: payload.season,\n        players: payload.players,\n        loading: false,\n        error: null\n      });\n\n    case REFRESH_PLAYER_SEASONS:\n      {\n        return _objectSpread({}, state, {\n          stats: payload,\n          loading: false\n        });\n      }\n\n    case LOADING_STATS:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case SET_GAME_MODE:\n      return _objectSpread({}, state, {\n        mode: payload\n      });\n\n    case SET_PERSPECTIVE:\n      return _objectSpread({}, state, {\n        perspective: payload\n      });\n\n    case SET_SEASON:\n      return _objectSpread({}, state, {\n        season: payload\n      });\n\n    case SET_ERROR:\n      return _objectSpread({}, state, {\n        error: payload,\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/ivan/Documents/Developer/Portfolio-Projects/mypubgsquad/mypubgsquad-next/src/redux/reducers/playerSeasonsReducer.js"],"names":["GET_PLAYER_SEASONS","REFRESH_PLAYER_SEASONS","LOADING_STATS","SET_GAME_MODE","SET_PERSPECTIVE","SET_SEASON","SET_ERROR","initialState","players","stats","mode","perspective","season","loading","error","state","type","payload"],"mappings":";AAAA,SACEA,kBADF,EAEEC,sBAFF,EAGEC,aAHF,EAIEC,aAJF,EAKEC,eALF,EAMEC,UANF,EAOEC,SAPF,QAQO,kBARP;AAUA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,EADU;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,IAAI,EAAE,OAHa;AAInBC,EAAAA,WAAW,EAAE,KAJM;AAKnBC,EAAAA,MAAM,EAAE,EALW;AAMnBC,EAAAA,OAAO,EAAE,KANU;AAOnBC,EAAAA,KAAK,EAAE;AAPY,CAArB;AAUA,gBAAe,YAA6C;AAAA,MAA5CC,KAA4C,uEAApCR,YAAoC;;AAAA;AAAA,MAApBS,IAAoB,QAApBA,IAAoB;AAAA,MAAdC,OAAc,QAAdA,OAAc;;AAC1D,UAAQD,IAAR;AACE,SAAKhB,kBAAL;AACE,+BACKe,KADL;AAEEN,QAAAA,KAAK,EAAEQ,OAAO,CAACR,KAFjB;AAGEG,QAAAA,MAAM,EAAEK,OAAO,CAACL,MAHlB;AAIEJ,QAAAA,OAAO,EAAES,OAAO,CAACT,OAJnB;AAKEK,QAAAA,OAAO,EAAE,KALX;AAMEC,QAAAA,KAAK,EAAE;AANT;;AAQF,SAAKb,sBAAL;AAA6B;AAC3B,iCACKc,KADL;AAEEN,UAAAA,KAAK,EAAEQ,OAFT;AAGEJ,UAAAA,OAAO,EAAE;AAHX;AAKD;;AACD,SAAKX,aAAL;AACE,+BAAYa,KAAZ;AAAmBF,QAAAA,OAAO,EAAE;AAA5B;;AACF,SAAKV,aAAL;AACE,+BAAYY,KAAZ;AAAmBL,QAAAA,IAAI,EAAEO;AAAzB;;AACF,SAAKb,eAAL;AACE,+BAAYW,KAAZ;AAAmBJ,QAAAA,WAAW,EAAEM;AAAhC;;AACF,SAAKZ,UAAL;AACE,+BAAYU,KAAZ;AAAmBH,QAAAA,MAAM,EAAEK;AAA3B;;AACF,SAAKX,SAAL;AACE,+BAAYS,KAAZ;AAAmBD,QAAAA,KAAK,EAAEG,OAA1B;AAAmCJ,QAAAA,OAAO,EAAE;AAA5C;;AACF;AACE,aAAOE,KAAP;AA5BJ;AA8BD,CA/BD","sourcesContent":["import {\n  GET_PLAYER_SEASONS,\n  REFRESH_PLAYER_SEASONS,\n  LOADING_STATS,\n  SET_GAME_MODE,\n  SET_PERSPECTIVE,\n  SET_SEASON,\n  SET_ERROR\n} from '../actions/types';\n\nconst initialState = {\n  players: [],\n  stats: [],\n  mode: 'squad',\n  perspective: 'FPP',\n  season: '',\n  loading: false,\n  error: null\n};\n\nexport default (state = initialState, { type, payload }) => {\n  switch (type) {\n    case GET_PLAYER_SEASONS:\n      return {\n        ...state,\n        stats: payload.stats,\n        season: payload.season,\n        players: payload.players,\n        loading: false,\n        error: null\n      };\n    case REFRESH_PLAYER_SEASONS: {\n      return {\n        ...state,\n        stats: payload,\n        loading: false\n      };\n    }\n    case LOADING_STATS:\n      return { ...state, loading: true };\n    case SET_GAME_MODE:\n      return { ...state, mode: payload };\n    case SET_PERSPECTIVE:\n      return { ...state, perspective: payload };\n    case SET_SEASON:\n      return { ...state, season: payload };\n    case SET_ERROR:\n      return { ...state, error: payload, loading: false };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}