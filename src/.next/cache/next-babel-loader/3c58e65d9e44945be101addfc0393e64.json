{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\n/* LIBRARIES */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport SwipeableViews from 'react-swipeable-views'; // import { Spring } from 'react-spring/renderprops';\n\n/* COMPONENTS */\n\nimport Separator from '../common/Separator';\nimport Spinner from '../common/Spinner';\nimport Error from '../common/Error';\nimport AloneTogetherPicker from './AloneTogetherPicker';\nimport IndividualStats from './GeneralStats/IndividualStats';\nimport TogetherStats from './SquadStats/TogetherStats';\n/* REDUX ACTIONS */\n\nimport { getPlayerSeasons, getCurrentSeason } from '../../redux/actions/playerSeasonsActions';\n/* HELPER FUNCTIONS */\n\nimport { sanitizeString } from '../../utils/Util';\n\nvar StatsDashboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StatsDashboard, _Component);\n\n  function StatsDashboard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StatsDashboard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StatsDashboard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      alone: true,\n      squad: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"fetchPlayerSeasons\", function () {\n      var squadMates = sanitizeString(_this.props.squad).split(',').filter(function (el) {\n        return el != null;\n      }).join(',');\n\n      _this.setState({\n        squad: squadMates\n      });\n\n      _this.props.getPlayerSeasons(squadMates, _this.props.season);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setAlone\", function (status) {\n      _this.setState({\n        alone: status\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderStats\", function () {\n      var index = _this.state.alone ? 0 : 1;\n      return React.createElement(SwipeableViews, {\n        index: index\n      }, React.createElement(IndividualStats, null), React.createElement(TogetherStats, null));\n    });\n\n    return _this;\n  }\n\n  _createClass(StatsDashboard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchPlayerSeasons();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevState.squad !== this.state.squad) this.fetchPlayerSeasons();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          loading = _this$props.loading,\n          error = _this$props.error;\n      var alone = this.state.alone;\n      return React.createElement(\"div\", {\n        className: \"squadStats\"\n      }, React.createElement(\"div\", {\n        className: \"container\"\n      }, React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(\"div\", {\n        className: \"col-md-12 my-4\"\n      }, loading ? React.createElement(Spinner, null) : error ? React.createElement(Error, {\n        error: error,\n        message: \"Oops! Something went wrong while fetching your squad's data, please try again later\",\n        retry: this.fetchPlayerSeasons\n      }) : React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n        className: \"display-3 text-center pubg-font text-black mb-4\"\n      }, \"Your Squad this season\"), React.createElement(AloneTogetherPicker, {\n        setAlone: this.setAlone,\n        alone: alone\n      }), React.createElement(Separator, {\n        color: \"dark\",\n        length: \"10\",\n        marginTop: \"1\",\n        marginBottom: \"3\"\n      }), this.renderStats())))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var newSquadMates = sanitizeString(nextProps.squad).split(',').filter(function (el) {\n        return el != null;\n      }).join(',');\n\n      if (newSquadMates !== prevState.squad) {\n        return {\n          squad: newSquadMates\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return StatsDashboard;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    players: state.playerSeasons.players,\n    squadStats: state.playerSeasons.stats,\n    loading: state.playerSeasons.loading,\n    season: state.playerSeasons.season,\n    error: state.playerSeasons.error\n  };\n};\n\nvar mapDispatchToProps = {\n  getPlayerSeasons: getPlayerSeasons,\n  getCurrentSeason: getCurrentSeason\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(StatsDashboard);","map":null,"metadata":{},"sourceType":"module"}