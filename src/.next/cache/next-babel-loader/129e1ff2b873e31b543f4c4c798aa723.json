{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\n\n/**\n * Creating a page named _error.js lets you override HTTP error messages\n */\nimport React from 'react';\nimport Link from 'next/link';\nimport { withRouter } from 'next/router';\nimport Layout from '../components/layout';\n\nvar ErrorPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ErrorPage, _React$Component);\n\n  function ErrorPage() {\n    _classCallCheck(this, ErrorPage);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ErrorPage).apply(this, arguments));\n  }\n\n  _createClass(ErrorPage, [{\n    key: \"render\",\n    value: function render() {\n      var response;\n\n      switch (this.props.errorCode) {\n        case 200: // Also display a 404 if someone requests /_error explicitly\n\n        case 401:\n          response = React.createElement(Layout, {\n            title: \"Unauthorized| MYPUBGSQUAD.com\"\n          }, React.createElement(\"div\", {\n            className: \"pt-5 container text-center full-height\"\n          }, React.createElement(\"h1\", {\n            className: \"display-4 \"\n          }, \"Registered users only\"), React.createElement(\"p\", null, \"You must be a registered user to view this content.\"), React.createElement(\"p\", null, React.createElement(Link, {\n            href: \"/login\"\n          }, React.createElement(\"a\", null, \"Login\")), ' ', \"or\", ' ', React.createElement(Link, {\n            href: \"/login\"\n          }, React.createElement(\"a\", null, \"Register\")), ' ', \"to view this content\")));\n\n        case 404:\n          response = React.createElement(Layout, {\n            title: \"Page Not Found | MYPUBGSQUAD.com\"\n          }, React.createElement(\"div\", {\n            className: \"pt-5 container text-center full-height\"\n          }, React.createElement(\"h1\", {\n            className: \"display-4 \"\n          }, \"Page Not Found\"), React.createElement(\"p\", null, \"The page \", React.createElement(\"strong\", null, this.props.router.asPath), \" does not exist.\"), React.createElement(\"p\", null, React.createElement(Link, {\n            href: \"/\"\n          }, React.createElement(\"a\", null, \"Go Home\")))));\n          break;\n\n        case 500:\n          response = React.createElement(Layout, {\n            title: \"Internal Server Error| MYPUBGSQUAD.com\"\n          }, React.createElement(\"div\", {\n            className: \"pt-5 container text-center\"\n          }, React.createElement(\"h1\", {\n            className: \"display-4\"\n          }, \"Internal Server Error\"), React.createElement(\"p\", null, \"An internal server error occurred.\")));\n          break;\n\n        default:\n          response = React.createElement(Layout, {\n            title: \"Internal Server Error| MYPUBGSQUAD.com\"\n          }, React.createElement(\"div\", {\n            className: \"pt-5 container text-center\"\n          }, React.createElement(\"h1\", {\n            className: \"display-4\"\n          }, \"HTTP \", this.props.errorCode, \" Error\"), React.createElement(\"p\", null, \"An \", React.createElement(\"strong\", null, \"HTTP \", this.props.errorCode), \" error occurred while trying to access \", React.createElement(\"strong\", null, this.props.router.pathname))));\n      }\n\n      return response;\n    }\n  }], [{\n    key: \"propTypes\",\n    value: function propTypes() {\n      return {\n        errorCode: React.PropTypes.number.isRequired,\n        url: React.PropTypes.string.isRequired\n      };\n    }\n  }, {\n    key: \"getInitialProps\",\n    value: function getInitialProps(_ref) {\n      var res = _ref.res,\n          xhr = _ref.xhr;\n      var errorCode = res ? res.statusCode : xhr ? xhr.status : null;\n      return {\n        errorCode: errorCode\n      };\n    }\n  }]);\n\n  return ErrorPage;\n}(React.Component);\n\nexport default withRouter(ErrorPage);","map":null,"metadata":{},"sourceType":"module"}