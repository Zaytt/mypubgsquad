{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport _round from 'lodash.round';\nexport var SquadMemberRandomFact =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SquadMemberRandomFact, _Component);\n\n  function SquadMemberRandomFact() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SquadMemberRandomFact);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SquadMemberRandomFact)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"getFactText\", function (stat) {\n      switch (stat) {\n        case 'timeSurvived':\n          return {\n            actionMost: 'has <span class=\"text-info\">survived</span> for',\n            actionAvg: 'has <span class=\"text-info\">survived</span> for an average of',\n            unitMost: ', the longest of the whole squad.',\n            unitAvg: ' each round.'\n          };\n\n        case 'alive':\n          return {\n            actionAvg: 'has survived <span class=\"text-info\"> all the way</span> to the end to enjoy his <span class=\"text-warning\">chicken dinner</span>',\n            unitAvg: 'times'\n          };\n\n        case 'zoneDeaths':\n          return {\n            actionMost: 'has been killed by the <span class=\"text-info\">zone</span>',\n            unitMost: 'times, more than any other squad member.'\n          };\n\n        case 'teamKills':\n          return {\n            actionMost: 'has commited',\n            unitMost: '<span class=\"text-danger\">team kills</span>, more than any other squad member. Shame on him.'\n          };\n\n        case 'headshotKills':\n          return {\n            actionMost: 'has shot ',\n            unitMost: 'players in the <span class=\"text-info\">face</span>!. Glorious!'\n          };\n\n        case 'roadKills':\n          return {\n            actionMost: 'has <span class=\"text-success\">ran over</span>',\n            unitMost: 'players.<br>Awesome!'\n          };\n\n        case 'revives':\n          return {\n            actionMost: 'has <span class=\"text-info\">revived</span> his teammates',\n            unitMost: 'times.<br>Hero!'\n          };\n\n        case 'swimDistance':\n          return {\n            actionMost: 'has <span class=\"text-info\">swum</span> over',\n            unitMost: 'meters.<br>Pretty impressive considering he was carrying over 50kg of guns, explosives and energy drinks.'\n          };\n\n        case 'walkDistance':\n          return {\n            actionMost: 'has <span class=\"text-info\">walked</span> over',\n            actionAvg: 'walks around',\n            unitMost: 'kilometers.',\n            unitAvg: '<span class=\"text-info\">kilometers</span> per round.'\n          };\n\n        case 'vehicleDestroys':\n          return {\n            actionMost: 'has <span class=\"text-success\">destroyed</span>',\n            unitMost: 'vehicles.<br>Nice!'\n          };\n\n        case 'weaponsAcquired':\n          return {\n            actionMost: 'has picked up',\n            actionAvg: 'has picked up an average of',\n            unitMost: \"<span class=\\\"text-success\\\">weapons</span>.\",\n            unitAvg: '<span class=\"text-success\">weapons</span> per match. Yep, running out of random stats here.'\n          };\n\n        default:\n          return null;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"calculateRandomFact\", function () {\n      var factsAvailable = ['timeSurvived', 'survived', 'zoneDeaths', 'teamKills', 'roadKills', 'revives', 'swimDistance', 'walkDistance', 'vehicleDestroys', 'weaponsAcquired'];\n\n      var facts = _this.props.stats.badges.filter(function (badge) {\n        return factsAvailable.includes(badge.stat);\n      });\n\n      var fact = facts.length > 0 ? facts[Math.floor(Math.random() * (facts.length - 1))] : false;\n      if (!fact) return _this.calculateRandomAvgFact();else {\n        var factText = _this.getFactText(fact.stat);\n\n        var factValue = fact.stat === 'walkDistance' ? _round(fact.value / 1000, 1) : fact.stat === 'timeSurvived' ? _this.convertSeconds(_round(fact.value, 0)) : fact.value % 1 === 0 ? fact.value : _round(fact.value, 1);\n        return \"\".concat(factText.actionMost, \" \").concat(factValue, \" \").concat(factText.unitMost);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"calculateRandomAvgFact\", function () {\n      var factsAvailable = ['alive', 'timeSurvived', 'walkDistance', 'weaponsAcquired'];\n      var _this$props = _this.props,\n          stats = _this$props.stats,\n          rounds = _this$props.rounds;\n      var facts = factsAvailable.filter(function (fact) {\n        return _this.props.stats[fact] > 0;\n      });\n      var fact = facts[Math.floor(Math.random() * (facts.length - 1))];\n      var factValue = fact === 'walkDistance' ? _round(stats[fact] / (1000 * rounds), 1) : fact === 'timeSurvived' ? _this.convertSeconds(_round(stats[fact] / rounds, 0)) : fact === 'alive' ? stats[fact] : _round(stats[fact] / rounds, 0);\n\n      var factText = _this.getFactText(fact);\n\n      return \"\".concat(factText.actionAvg, \" \").concat(factValue, \" \").concat(factText.unitAvg);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"convertSeconds\", function (sec) {\n      var hrs = Math.floor(sec / 3600);\n      var min = Math.floor((sec - hrs * 3600) / 60);\n      var seconds = sec - hrs * 3600 - min * 60;\n      seconds = Math.round(seconds * 100) / 100;\n      var result = hrs === 0 ? '' : hrs === 1 ? \"\".concat(hrs, \" hour\") : \"\".concat(hrs, \" hours\");\n      result += (hrs > 0 ? ', ' : '') + (min === 1 ? \"\".concat(min, \" minute\") : \"\".concat(min, \" minutes\"));\n      result += (hrs === 0 && min === 0 ? ' ' : ' and ') + (seconds === 1 ? \"\".concat(seconds, \" second\") : \"\".concat(seconds, \" seconds\"));\n      return result;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getRandomFact\", function () {\n      var chance = Math.floor(Math.random() * 100);\n      if (chance < 60) return _this.calculateRandomFact();else return _this.calculateRandomAvgFact();\n    });\n\n    return _this;\n  }\n\n  _createClass(SquadMemberRandomFact, [{\n    key: \"render\",\n    value: function render() {\n      var randomFact = this.getRandomFact();\n      return React.createElement(\"div\", {\n        className: \"row d-flex justify-content-center\"\n      }, React.createElement(\"div\", {\n        className: \"col-10\"\n      }, React.createElement(\"h5\", {\n        className: \"mb-3\"\n      }, \"Random fact: \"), React.createElement(\"p\", {\n        className: \"lead\"\n      }, ' ', React.createElement(\"span\", {\n        className: \"text-warning\"\n      }, \"\".concat(this.props.player, \" \")), React.createElement(\"span\", {\n        dangerouslySetInnerHTML: {\n          __html: randomFact\n        }\n      }))));\n    }\n  }]);\n\n  return SquadMemberRandomFact;\n}(Component);\n\n_defineProperty(SquadMemberRandomFact, \"propTypes\", {\n  player: PropTypes.string.isRequired,\n  stats: PropTypes.object.isRequired,\n  rounds: PropTypes.number.isRequired\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {};\n};\n\nvar mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(SquadMemberRandomFact);","map":{"version":3,"sources":["/Users/ivan/Documents/Developer/Portfolio-Projects/mypubgsquad/mypubgsquad-next/components/stats_page/SquadStats/SquadMemberRandomFact.js"],"names":["React","Component","PropTypes","connect","_round","SquadMemberRandomFact","stat","actionMost","actionAvg","unitMost","unitAvg","factsAvailable","facts","props","stats","badges","filter","badge","includes","fact","length","Math","floor","random","calculateRandomAvgFact","factText","getFactText","factValue","value","convertSeconds","rounds","sec","hrs","min","seconds","round","result","chance","calculateRandomFact","randomFact","getRandomFact","player","__html","string","isRequired","object","number","mapStateToProps","state","mapDispatchToProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,WAAaC,qBAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,kEAOgB,UAAAC,IAAI,EAAI;AACpB,cAAQA,IAAR;AACE,aAAK,cAAL;AACE,iBAAO;AACLC,YAAAA,UAAU,EAAE,iDADP;AAELC,YAAAA,SAAS,EAAE,+DAFN;AAGLC,YAAAA,QAAQ,EAAE,mCAHL;AAILC,YAAAA,OAAO,EAAE;AAJJ,WAAP;;AAMF,aAAK,OAAL;AACE,iBAAO;AACLF,YAAAA,SAAS,EACP,mIAFG;AAGLE,YAAAA,OAAO,EAAE;AAHJ,WAAP;;AAKF,aAAK,YAAL;AACE,iBAAO;AACLH,YAAAA,UAAU,EAAE,4DADP;AAELE,YAAAA,QAAQ,EAAE;AAFL,WAAP;;AAIF,aAAK,WAAL;AACE,iBAAO;AACLF,YAAAA,UAAU,EAAE,cADP;AAELE,YAAAA,QAAQ,EACN;AAHG,WAAP;;AAKF,aAAK,eAAL;AACE,iBAAO;AACLF,YAAAA,UAAU,EAAE,WADP;AAELE,YAAAA,QAAQ,EAAE;AAFL,WAAP;;AAIF,aAAK,WAAL;AACE,iBAAO;AACLF,YAAAA,UAAU,EAAE,gDADP;AAELE,YAAAA,QAAQ,EAAE;AAFL,WAAP;;AAIF,aAAK,SAAL;AACE,iBAAO;AACLF,YAAAA,UAAU,EAAE,0DADP;AAELE,YAAAA,QAAQ,EAAE;AAFL,WAAP;;AAIF,aAAK,cAAL;AACE,iBAAO;AACLF,YAAAA,UAAU,EAAE,8CADP;AAELE,YAAAA,QAAQ,EACN;AAHG,WAAP;;AAKF,aAAK,cAAL;AACE,iBAAO;AACLF,YAAAA,UAAU,EAAE,gDADP;AAELC,YAAAA,SAAS,EAAE,cAFN;AAGLC,YAAAA,QAAQ,EAAE,aAHL;AAILC,YAAAA,OAAO,EAAE;AAJJ,WAAP;;AAMF,aAAK,iBAAL;AACE,iBAAO;AACLH,YAAAA,UAAU,EAAE,iDADP;AAELE,YAAAA,QAAQ,EAAE;AAFL,WAAP;;AAIF,aAAK,iBAAL;AACE,iBAAO;AACLF,YAAAA,UAAU,EAAE,eADP;AAELC,YAAAA,SAAS,EAAE,6BAFN;AAGLC,YAAAA,QAAQ,gDAHH;AAILC,YAAAA,OAAO,EACL;AALG,WAAP;;AAOF;AACE,iBAAO,IAAP;AAnEJ;AAqED,KA7EH;;AAAA,0EA+EwB,YAAM;AAC1B,UAAMC,cAAc,GAAG,CACrB,cADqB,EAErB,UAFqB,EAGrB,YAHqB,EAIrB,WAJqB,EAKrB,WALqB,EAMrB,SANqB,EAOrB,cAPqB,EAQrB,cARqB,EASrB,iBATqB,EAUrB,iBAVqB,CAAvB;;AAYA,UAAMC,KAAK,GAAG,MAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,MAAxB,CAA+B,UAAAC,KAAK;AAAA,eAAIN,cAAc,CAACO,QAAf,CAAwBD,KAAK,CAACX,IAA9B,CAAJ;AAAA,OAApC,CAAd;;AAEA,UAAMa,IAAI,GAAGP,KAAK,CAACQ,MAAN,GAAe,CAAf,GAAmBR,KAAK,CAACS,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBX,KAAK,CAACQ,MAAN,GAAe,CAAhC,CAAX,CAAD,CAAxB,GAA2E,KAAxF;AACA,UAAI,CAACD,IAAL,EAAW,OAAO,MAAKK,sBAAL,EAAP,CAAX,KACK;AACH,YAAIC,QAAQ,GAAG,MAAKC,WAAL,CAAiBP,IAAI,CAACb,IAAtB,CAAf;;AACA,YAAIqB,SAAS,GACXR,IAAI,CAACb,IAAL,KAAc,cAAd,GACIF,MAAM,CAACe,IAAI,CAACS,KAAL,GAAa,IAAd,EAAoB,CAApB,CADV,GAEIT,IAAI,CAACb,IAAL,KAAc,cAAd,GACA,MAAKuB,cAAL,CAAoBzB,MAAM,CAACe,IAAI,CAACS,KAAN,EAAa,CAAb,CAA1B,CADA,GAEAT,IAAI,CAACS,KAAL,GAAa,CAAb,KAAmB,CAAnB,GACAT,IAAI,CAACS,KADL,GAEAxB,MAAM,CAACe,IAAI,CAACS,KAAN,EAAa,CAAb,CAPZ;AASA,yBAAUH,QAAQ,CAAClB,UAAnB,cAAiCoB,SAAjC,cAA8CF,QAAQ,CAAChB,QAAvD;AACD;AACF,KA7GH;;AAAA,6EA+G2B,YAAM;AAC7B,UAAME,cAAc,GAAG,CAAC,OAAD,EAAU,cAAV,EAA0B,cAA1B,EAA0C,iBAA1C,CAAvB;AAD6B,wBAEH,MAAKE,KAFF;AAAA,UAErBC,KAFqB,eAErBA,KAFqB;AAAA,UAEdgB,MAFc,eAEdA,MAFc;AAG7B,UAAMlB,KAAK,GAAGD,cAAc,CAACK,MAAf,CAAsB,UAAAG,IAAI;AAAA,eAAI,MAAKN,KAAL,CAAWC,KAAX,CAAiBK,IAAjB,IAAyB,CAA7B;AAAA,OAA1B,CAAd;AACA,UAAIA,IAAI,GAAGP,KAAK,CAACS,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBX,KAAK,CAACQ,MAAN,GAAe,CAAhC,CAAX,CAAD,CAAhB;AACA,UAAIO,SAAS,GACXR,IAAI,KAAK,cAAT,GACIf,MAAM,CAACU,KAAK,CAACK,IAAD,CAAL,IAAe,OAAOW,MAAtB,CAAD,EAAgC,CAAhC,CADV,GAEIX,IAAI,KAAK,cAAT,GACA,MAAKU,cAAL,CAAoBzB,MAAM,CAACU,KAAK,CAACK,IAAD,CAAL,GAAcW,MAAf,EAAuB,CAAvB,CAA1B,CADA,GAEAX,IAAI,KAAK,OAAT,GACAL,KAAK,CAACK,IAAD,CADL,GAEAf,MAAM,CAACU,KAAK,CAACK,IAAD,CAAL,GAAcW,MAAf,EAAuB,CAAvB,CAPZ;;AAQA,UAAIL,QAAQ,GAAG,MAAKC,WAAL,CAAiBP,IAAjB,CAAf;;AACA,uBAAUM,QAAQ,CAACjB,SAAnB,cAAgCmB,SAAhC,cAA6CF,QAAQ,CAACf,OAAtD;AACD,KA9HH;;AAAA,qEAgImB,UAAAqB,GAAG,EAAI;AACtB,UAAMC,GAAG,GAAGX,IAAI,CAACC,KAAL,CAAWS,GAAG,GAAG,IAAjB,CAAZ;AACA,UAAME,GAAG,GAAGZ,IAAI,CAACC,KAAL,CAAW,CAACS,GAAG,GAAGC,GAAG,GAAG,IAAb,IAAqB,EAAhC,CAAZ;AACA,UAAIE,OAAO,GAAGH,GAAG,GAAGC,GAAG,GAAG,IAAZ,GAAmBC,GAAG,GAAG,EAAvC;AACAC,MAAAA,OAAO,GAAGb,IAAI,CAACc,KAAL,CAAWD,OAAO,GAAG,GAArB,IAA4B,GAAtC;AAEA,UAAIE,MAAM,GAAGJ,GAAG,KAAK,CAAR,GAAY,EAAZ,GAAiBA,GAAG,KAAK,CAAR,aAAeA,GAAf,uBAA+BA,GAA/B,WAA9B;AACAI,MAAAA,MAAM,IAAI,CAACJ,GAAG,GAAG,CAAN,GAAU,IAAV,GAAiB,EAAlB,KAAyBC,GAAG,KAAK,CAAR,aAAeA,GAAf,yBAAiCA,GAAjC,aAAzB,CAAV;AACAG,MAAAA,MAAM,IACJ,CAACJ,GAAG,KAAK,CAAR,IAAaC,GAAG,KAAK,CAArB,GAAyB,GAAzB,GAA+B,OAAhC,KACCC,OAAO,KAAK,CAAZ,aAAmBA,OAAnB,yBAAyCA,OAAzC,aADD,CADF;AAGA,aAAOE,MAAP;AACD,KA5IH;;AAAA,oEA8IkB,YAAM;AACpB,UAAIC,MAAM,GAAGhB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAb;AACA,UAAIc,MAAM,GAAG,EAAb,EAAiB,OAAO,MAAKC,mBAAL,EAAP,CAAjB,KACK,OAAO,MAAKd,sBAAL,EAAP;AACN,KAlJH;;AAAA;AAAA;;AAAA;AAAA;AAAA,6BAoJW;AACP,UAAMe,UAAU,GAAG,KAAKC,aAAL,EAAnB;AACA,aACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE;AAAI,QAAA,SAAS,EAAC;AAAd,yBADF,EAEE;AAAG,QAAA,SAAS,EAAC;AAAb,SACG,GADH,EAEE;AAAM,QAAA,SAAS,EAAC;AAAhB,mBAAmC,KAAK3B,KAAL,CAAW4B,MAA9C,OAFF,EAGE;AAAM,QAAA,uBAAuB,EAAE;AAAEC,UAAAA,MAAM,EAAEH;AAAV;AAA/B,QAHF,CAFF,CADF,CADF;AAYD;AAlKH;;AAAA;AAAA,EAA2CtC,SAA3C;;gBAAaI,qB,eACQ;AACjBoC,EAAAA,MAAM,EAAEvC,SAAS,CAACyC,MAAV,CAAiBC,UADR;AAEjB9B,EAAAA,KAAK,EAAEZ,SAAS,CAAC2C,MAAV,CAAiBD,UAFP;AAGjBd,EAAAA,MAAM,EAAE5B,SAAS,CAAC4C,MAAV,CAAiBF;AAHR,C;;AAoKrB,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK,EAAL;AAAA,CAA7B;;AAEA,IAAMC,kBAAkB,GAAG,EAA3B;AAEA,eAAe9C,OAAO,CACpB4C,eADoB,EAEpBE,kBAFoB,CAAP,CAGb5C,qBAHa,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport _round from 'lodash.round';\n\nexport class SquadMemberRandomFact extends Component {\n  static propTypes = {\n    player: PropTypes.string.isRequired,\n    stats: PropTypes.object.isRequired,\n    rounds: PropTypes.number.isRequired\n  };\n\n  getFactText = stat => {\n    switch (stat) {\n      case 'timeSurvived':\n        return {\n          actionMost: 'has <span class=\"text-info\">survived</span> for',\n          actionAvg: 'has <span class=\"text-info\">survived</span> for an average of',\n          unitMost: ', the longest of the whole squad.',\n          unitAvg: ' each round.'\n        };\n      case 'alive':\n        return {\n          actionAvg:\n            'has survived <span class=\"text-info\"> all the way</span> to the end to enjoy his <span class=\"text-warning\">chicken dinner</span>',\n          unitAvg: 'times'\n        };\n      case 'zoneDeaths':\n        return {\n          actionMost: 'has been killed by the <span class=\"text-info\">zone</span>',\n          unitMost: 'times, more than any other squad member.'\n        };\n      case 'teamKills':\n        return {\n          actionMost: 'has commited',\n          unitMost:\n            '<span class=\"text-danger\">team kills</span>, more than any other squad member. Shame on him.'\n        };\n      case 'headshotKills':\n        return {\n          actionMost: 'has shot ',\n          unitMost: 'players in the <span class=\"text-info\">face</span>!. Glorious!'\n        };\n      case 'roadKills':\n        return {\n          actionMost: 'has <span class=\"text-success\">ran over</span>',\n          unitMost: 'players.<br>Awesome!'\n        };\n      case 'revives':\n        return {\n          actionMost: 'has <span class=\"text-info\">revived</span> his teammates',\n          unitMost: 'times.<br>Hero!'\n        };\n      case 'swimDistance':\n        return {\n          actionMost: 'has <span class=\"text-info\">swum</span> over',\n          unitMost:\n            'meters.<br>Pretty impressive considering he was carrying over 50kg of guns, explosives and energy drinks.'\n        };\n      case 'walkDistance':\n        return {\n          actionMost: 'has <span class=\"text-info\">walked</span> over',\n          actionAvg: 'walks around',\n          unitMost: 'kilometers.',\n          unitAvg: '<span class=\"text-info\">kilometers</span> per round.'\n        };\n      case 'vehicleDestroys':\n        return {\n          actionMost: 'has <span class=\"text-success\">destroyed</span>',\n          unitMost: 'vehicles.<br>Nice!'\n        };\n      case 'weaponsAcquired':\n        return {\n          actionMost: 'has picked up',\n          actionAvg: 'has picked up an average of',\n          unitMost: `<span class=\"text-success\">weapons</span>.`,\n          unitAvg:\n            '<span class=\"text-success\">weapons</span> per match. Yep, running out of random stats here.'\n        };\n      default:\n        return null;\n    }\n  };\n\n  calculateRandomFact = () => {\n    const factsAvailable = [\n      'timeSurvived',\n      'survived',\n      'zoneDeaths',\n      'teamKills',\n      'roadKills',\n      'revives',\n      'swimDistance',\n      'walkDistance',\n      'vehicleDestroys',\n      'weaponsAcquired'\n    ];\n    const facts = this.props.stats.badges.filter(badge => factsAvailable.includes(badge.stat));\n\n    const fact = facts.length > 0 ? facts[Math.floor(Math.random() * (facts.length - 1))] : false;\n    if (!fact) return this.calculateRandomAvgFact();\n    else {\n      let factText = this.getFactText(fact.stat);\n      let factValue =\n        fact.stat === 'walkDistance'\n          ? _round(fact.value / 1000, 1)\n          : fact.stat === 'timeSurvived'\n          ? this.convertSeconds(_round(fact.value, 0))\n          : fact.value % 1 === 0\n          ? fact.value\n          : _round(fact.value, 1);\n\n      return `${factText.actionMost} ${factValue} ${factText.unitMost}`;\n    }\n  };\n\n  calculateRandomAvgFact = () => {\n    const factsAvailable = ['alive', 'timeSurvived', 'walkDistance', 'weaponsAcquired'];\n    const { stats, rounds } = this.props;\n    const facts = factsAvailable.filter(fact => this.props.stats[fact] > 0);\n    let fact = facts[Math.floor(Math.random() * (facts.length - 1))];\n    let factValue =\n      fact === 'walkDistance'\n        ? _round(stats[fact] / (1000 * rounds), 1)\n        : fact === 'timeSurvived'\n        ? this.convertSeconds(_round(stats[fact] / rounds, 0))\n        : fact === 'alive'\n        ? stats[fact]\n        : _round(stats[fact] / rounds, 0);\n    let factText = this.getFactText(fact);\n    return `${factText.actionAvg} ${factValue} ${factText.unitAvg}`;\n  };\n\n  convertSeconds = sec => {\n    const hrs = Math.floor(sec / 3600);\n    const min = Math.floor((sec - hrs * 3600) / 60);\n    let seconds = sec - hrs * 3600 - min * 60;\n    seconds = Math.round(seconds * 100) / 100;\n\n    let result = hrs === 0 ? '' : hrs === 1 ? `${hrs} hour` : `${hrs} hours`;\n    result += (hrs > 0 ? ', ' : '') + (min === 1 ? `${min} minute` : `${min} minutes`);\n    result +=\n      (hrs === 0 && min === 0 ? ' ' : ' and ') +\n      (seconds === 1 ? `${seconds} second` : `${seconds} seconds`);\n    return result;\n  };\n\n  getRandomFact = () => {\n    let chance = Math.floor(Math.random() * 100);\n    if (chance < 60) return this.calculateRandomFact();\n    else return this.calculateRandomAvgFact();\n  };\n\n  render() {\n    const randomFact = this.getRandomFact();\n    return (\n      <div className=\"row d-flex justify-content-center\">\n        <div className=\"col-10\">\n          <h5 className=\"mb-3\">Random fact: </h5>\n          <p className=\"lead\">\n            {' '}\n            <span className=\"text-warning\">{`${this.props.player} `}</span>\n            <span dangerouslySetInnerHTML={{ __html: randomFact }} />\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = {};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SquadMemberRandomFact);\n"]},"metadata":{},"sourceType":"module"}