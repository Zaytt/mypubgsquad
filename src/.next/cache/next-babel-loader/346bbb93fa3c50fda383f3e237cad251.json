{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/json/stringify\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/array/is-array\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs2/regenerator\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\"));\n\nvar memjs = require('memjs');\n\nvar serverStr = process.env.NODE_ENV === 'production' ? process.env.MEMCACHIER_USERNAME + ':' + process.env.MEMCACHIER_PASSWORD + '@' + process.env.MEMCACHIER_SERVERS : 'localhost:11211';\nvar cache = memjs.Client.create(serverStr);\n/**\n * GETS THE PLAYER SEASONS FROM THE CACHE\n * @param {Array<String>} players Player names array to look up\n */\n\nvar getCachedPlayerSeasons =\n/*#__PURE__*/\nfunction () {\n  var _ref = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee(players) {\n    var cachedPlayers, nonCachedPlayers;\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            cachedPlayers = [];\n            nonCachedPlayers = [];\n            _context.next = 4;\n            return _promise[\"default\"].all(players.map(function (player) {\n              return cache.get(\"PlayerSeason:\".concat(player)).then(function (_ref2) {\n                var value = _ref2.value;\n                if (value) cachedPlayers.push(JSON.parse(value));else nonCachedPlayers.push(player);\n              });\n            }))[\"catch\"](function (err) {\n              throw err;\n            });\n\n          case 4:\n            return _context.abrupt(\"return\", {\n              cachedPlayers: cachedPlayers,\n              nonCachedPlayers: nonCachedPlayers\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getCachedPlayerSeasons(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * STORES THE PLAYER SEASONS IN CACHE\n * @param {Array<PlayerSeason>} playersSeasons Array or single element of PlayerSeasons\n * to store in the cache\n */\n\n\nvar setCachedPlayerSeasons =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee2(playerSeasons) {\n    return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(0, _isArray[\"default\"])(playerSeasons)) {\n              _context2.next = 6;\n              break;\n            }\n\n            _context2.next = 3;\n            return _promise[\"default\"].all(playerSeasons.map(function (ps) {\n              return cache.set(\"PlayerSeason:\".concat(ps.relationships.player.attributes.name), (0, _stringify[\"default\"])(ps), {\n                expires: 1800\n              });\n            }))[\"catch\"](function (err) {\n              throw err;\n            });\n\n          case 3:\n            _context2.t0 = _context2.sent;\n            _context2.next = 9;\n            break;\n\n          case 6:\n            _context2.next = 8;\n            return cache.set(\"PlayerSeason:\".concat(playerSeasons.relationships.player.attributes.name), (0, _stringify[\"default\"])(playerSeasons), {\n              expires: 1800\n            }).then(function (res) {\n              return true;\n            })[\"catch\"](function (err) {\n              throw err;\n            });\n\n          case 8:\n            _context2.t0 = _context2.sent;\n\n          case 9:\n            return _context2.abrupt(\"return\", _context2.t0);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function setCachedPlayerSeasons(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n/**\n * GETS THE SEASONS FROM THE CACHE\n */\n\n\nvar getCachedSeasons = function getCachedSeasons() {\n  return cache.get(\"Seasons\").then(function (_ref4) {\n    var value = _ref4.value;\n    return JSON.parse(value);\n  })[\"catch\"](function (err) {\n    throw err;\n  });\n};\n/**\n * STORES THE SEASONS IN THE CACHE\n * @param {Array<Seasons>} seasons array of Seasons objects\n * to store in the cache\n */\n\n\nvar setCachedSeasons =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee3(seasons) {\n    return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return cache.set(\"Seasons\", (0, _stringify[\"default\"])(seasons), {\n              expires: 86400\n            }).then(function (res) {\n              return true;\n            })[\"catch\"](function (err) {\n              throw err;\n            });\n\n          case 2:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function setCachedSeasons(_x3) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nmodule.exports = {\n  getCachedPlayerSeasons: getCachedPlayerSeasons,\n  setCachedPlayerSeasons: setCachedPlayerSeasons,\n  getCachedSeasons: getCachedSeasons,\n  setCachedSeasons: setCachedSeasons\n};","map":{"version":3,"sources":["/Users/ivan/Documents/Developer/Portfolio-Projects/mypubgsquad/mypubgsquad-next/src/server/cache/cacheController.js"],"names":["memjs","require","serverStr","process","env","NODE_ENV","MEMCACHIER_USERNAME","MEMCACHIER_PASSWORD","MEMCACHIER_SERVERS","cache","Client","create","getCachedPlayerSeasons","players","cachedPlayers","nonCachedPlayers","all","map","player","get","then","value","push","JSON","parse","err","setCachedPlayerSeasons","playerSeasons","ps","set","relationships","attributes","name","expires","res","getCachedSeasons","setCachedSeasons","seasons","module","exports"],"mappings":"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","sourcesContent":["const memjs = require('memjs');\n\nlet serverStr =\n  process.env.NODE_ENV === 'production'\n    ? process.env.MEMCACHIER_USERNAME +\n      ':' +\n      process.env.MEMCACHIER_PASSWORD +\n      '@' +\n      process.env.MEMCACHIER_SERVERS\n    : 'localhost:11211';\nconst cache = memjs.Client.create(serverStr);\n\n/**\n * GETS THE PLAYER SEASONS FROM THE CACHE\n * @param {Array<String>} players Player names array to look up\n */\nconst getCachedPlayerSeasons = async players => {\n  const cachedPlayers = [];\n  const nonCachedPlayers = [];\n\n  await Promise.all(\n    players.map(player => {\n      return cache.get(`PlayerSeason:${player}`).then(({ value }) => {\n        if (value) cachedPlayers.push(JSON.parse(value));\n        else nonCachedPlayers.push(player);\n      });\n    })\n  ).catch(err => {\n    throw err;\n  });\n\n  return {\n    cachedPlayers,\n    nonCachedPlayers\n  };\n};\n\n/**\n * STORES THE PLAYER SEASONS IN CACHE\n * @param {Array<PlayerSeason>} playersSeasons Array or single element of PlayerSeasons\n * to store in the cache\n */\nconst setCachedPlayerSeasons = async playerSeasons => {\n  return Array.isArray(playerSeasons)\n    ? await Promise.all(\n        playerSeasons.map(ps => {\n          return cache.set(\n            `PlayerSeason:${ps.relationships.player.attributes.name}`,\n            JSON.stringify(ps),\n            { expires: 1800 }\n          );\n        })\n      ).catch(err => {\n        throw err;\n      })\n    : await cache\n        .set(\n          `PlayerSeason:${playerSeasons.relationships.player.attributes.name}`,\n          JSON.stringify(playerSeasons),\n          { expires: 1800 }\n        )\n        .then(res => true)\n        .catch(err => {\n          throw err;\n        });\n};\n\n/**\n * GETS THE SEASONS FROM THE CACHE\n */\nconst getCachedSeasons = () => {\n  return cache\n    .get(`Seasons`)\n    .then(({ value }) => JSON.parse(value))\n    .catch(err => {\n      throw err;\n    });\n};\n\n/**\n * STORES THE SEASONS IN THE CACHE\n * @param {Array<Seasons>} seasons array of Seasons objects\n * to store in the cache\n */\nconst setCachedSeasons = async seasons => {\n  return await cache\n    .set(`Seasons`, JSON.stringify(seasons), { expires: 86400 })\n    .then(res => true)\n    .catch(err => {\n      throw err;\n    });\n};\n\nmodule.exports = {\n  getCachedPlayerSeasons,\n  setCachedPlayerSeasons,\n  getCachedSeasons,\n  setCachedSeasons\n};\n"]},"metadata":{},"sourceType":"script"}