{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport _round from 'lodash.round';\nimport Header from './SquadMemberCardHeader';\nimport Stat from './SquadMemberCardStat';\nimport Separator from '../../common/Separator';\n\nvar SquadMemberCard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SquadMemberCard, _Component);\n\n  function SquadMemberCard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SquadMemberCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SquadMemberCard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"secondsToMinutes\", function (secs) {\n      secs = _round(secs);\n      var minutes = Math.floor(_round(secs) / 60);\n      var seconds = _round(secs) - minutes * 60;\n      return \"\".concat(minutes, \":\").concat(seconds);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkZeroGames\", function (stat, rounds) {\n      return rounds === 0 ? '0' : stat;\n    });\n\n    return _this;\n  }\n\n  _createClass(SquadMemberCard, [{\n    key: \"render\",\n    value: function render() {\n      var gameMode = this.props.mode + this.props.perspective;\n      var name = this.props.playerSeason.relationships.player.attributes.name;\n      var _this$props$playerSea = this.props.playerSeason.attributes.gameModeStats[gameMode],\n          rankPoints = _this$props$playerSea.rankPoints,\n          kills = _this$props$playerSea.kills,\n          roundMostKills = _this$props$playerSea.roundMostKills,\n          roundsPlayed = _this$props$playerSea.roundsPlayed,\n          damageDealt = _this$props$playerSea.damageDealt,\n          timeSurvived = _this$props$playerSea.timeSurvived,\n          longestKill = _this$props$playerSea.longestKill,\n          headshotKills = _this$props$playerSea.headshotKills,\n          wins = _this$props$playerSea.wins,\n          top10s = _this$props$playerSea.top10s;\n      return React.createElement(\"div\", {\n        className: \"card h-100 w-100 bg-dark text-light border-secondary stat-card\"\n      }, React.createElement(\"div\", {\n        className: \"card-body\"\n      }, React.createElement(Header, {\n        playername: name,\n        rank: rankPoints,\n        gamesPlayed: roundsPlayed,\n        wins: wins,\n        top10s: top10s,\n        kills: kills\n      }), React.createElement(Separator, {\n        color: \"secondary\",\n        margin: \"0\",\n        length: \"12\"\n      }), roundsPlayed === 0 ? React.createElement(\"h3\", {\n        className: \"text-center h-50 d-flex justify-content-center align-items-center\"\n      }, \"No rounds played\") : React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(Stat, {\n        stat: \"KDR\",\n        value: this.checkZeroGames(_round(kills / roundsPlayed, 2), roundsPlayed),\n        bold: true\n      }), React.createElement(Stat, {\n        stat: \"Avg. Damage\",\n        value: this.checkZeroGames(_round(damageDealt / roundsPlayed, 2), roundsPlayed),\n        bold: true\n      })), React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(Stat, {\n        stat: \"Most Kills\",\n        value: roundMostKills\n      }), React.createElement(Stat, {\n        stat: \"Avg. Time Survived\",\n        value: this.checkZeroGames(this.secondsToMinutes(timeSurvived / roundsPlayed), roundsPlayed)\n      })), React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(Stat, {\n        stat: \"Longest Kill\",\n        value: \"\".concat(this.checkZeroGames(_round(longestKill), roundsPlayed), \" m\")\n      }), React.createElement(Stat, {\n        stat: \"Headshot\",\n        value: \"\".concat(this.checkZeroGames(_round(headshotKills / kills * 100, 1), roundsPlayed), \" %\")\n      })), React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(Stat, {\n        stat: \"Win %\",\n        value: \"\".concat(this.checkZeroGames(_round(wins / roundsPlayed * 100, 1), roundsPlayed), \" %\")\n      }), React.createElement(Stat, {\n        stat: \"Top 10 %\",\n        value: \"\".concat(this.checkZeroGames(_round(top10s / roundsPlayed * 100, 1), roundsPlayed), \" %\")\n      })))));\n    }\n  }]);\n\n  return SquadMemberCard;\n}(Component);\n\n_defineProperty(SquadMemberCard, \"propTypes\", {\n  playerSeason: PropTypes.object.isRequired,\n  mode: PropTypes.string.isRequired,\n  perspective: PropTypes.string.isRequired\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    mode: state.playerSeasons.mode,\n    perspective: state.playerSeasons.perspective\n  };\n};\n\nvar mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(SquadMemberCard);","map":{"version":3,"sources":["/Users/ivan/Documents/Developer/Portfolio-Projects/mypubgsquad/mypubgsquad-next/src/components/stats_page/GeneralStats/SquadMemberCard.js"],"names":["React","Component","PropTypes","connect","_round","Header","Stat","Separator","SquadMemberCard","secs","minutes","Math","floor","seconds","stat","rounds","gameMode","props","mode","perspective","name","playerSeason","relationships","player","attributes","gameModeStats","rankPoints","kills","roundMostKills","roundsPlayed","damageDealt","timeSurvived","longestKill","headshotKills","wins","top10s","checkZeroGames","secondsToMinutes","object","isRequired","string","mapStateToProps","state","playerSeasons","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport _round from 'lodash.round';\nimport Header from './SquadMemberCardHeader';\nimport Stat from './SquadMemberCardStat';\nimport Separator from '../../common/Separator';\n\nclass SquadMemberCard extends Component {\n  static propTypes = {\n    playerSeason: PropTypes.object.isRequired,\n    mode: PropTypes.string.isRequired,\n    perspective: PropTypes.string.isRequired\n  };\n\n  secondsToMinutes = secs => {\n    secs = _round(secs);\n    const minutes = Math.floor(_round(secs) / 60);\n    const seconds = _round(secs) - minutes * 60;\n    return `${minutes}:${seconds}`;\n  };\n\n  checkZeroGames = (stat, rounds) => {\n    return rounds === 0 ? '0' : stat;\n  };\n\n  render() {\n    const gameMode = this.props.mode + this.props.perspective;\n    const { name } = this.props.playerSeason.relationships.player.attributes;\n    const {\n      rankPoints,\n      kills,\n      roundMostKills,\n      roundsPlayed,\n      damageDealt,\n      timeSurvived,\n      longestKill,\n      headshotKills,\n      wins,\n      top10s\n    } = this.props.playerSeason.attributes.gameModeStats[gameMode];\n\n    return (\n      <div className=\"card h-100 w-100 bg-dark text-light border-secondary stat-card\">\n        <div className=\"card-body\">\n          <Header\n            playername={name}\n            rank={rankPoints}\n            gamesPlayed={roundsPlayed}\n            wins={wins}\n            top10s={top10s}\n            kills={kills}\n          />\n          <Separator color=\"secondary\" margin=\"0\" length=\"12\" />\n          {roundsPlayed === 0 ? (\n            <h3 className=\"text-center h-50 d-flex justify-content-center align-items-center\">\n              No rounds played\n            </h3>\n          ) : (\n            <React.Fragment>\n              <div className=\"row\">\n                <Stat\n                  stat=\"KDR\"\n                  value={this.checkZeroGames(_round(kills / roundsPlayed, 2), roundsPlayed)}\n                  bold\n                />\n                <Stat\n                  stat=\"Avg. Damage\"\n                  value={this.checkZeroGames(_round(damageDealt / roundsPlayed, 2), roundsPlayed)}\n                  bold\n                />\n              </div>\n              <div className=\"row\">\n                <Stat stat=\"Most Kills\" value={roundMostKills} />\n                <Stat\n                  stat=\"Avg. Time Survived\"\n                  value={this.checkZeroGames(\n                    this.secondsToMinutes(timeSurvived / roundsPlayed),\n                    roundsPlayed\n                  )}\n                />\n              </div>\n              <div className=\"row\">\n                <Stat\n                  stat=\"Longest Kill\"\n                  value={`${this.checkZeroGames(_round(longestKill), roundsPlayed)} m`}\n                />\n                <Stat\n                  stat=\"Headshot\"\n                  value={`${this.checkZeroGames(\n                    _round((headshotKills / kills) * 100, 1),\n                    roundsPlayed\n                  )} %`}\n                />\n              </div>\n              <div className=\"row\">\n                <Stat\n                  stat=\"Win %\"\n                  value={`${this.checkZeroGames(\n                    _round((wins / roundsPlayed) * 100, 1),\n                    roundsPlayed\n                  )} %`}\n                />\n                <Stat\n                  stat=\"Top 10 %\"\n                  value={`${this.checkZeroGames(\n                    _round((top10s / roundsPlayed) * 100, 1),\n                    roundsPlayed\n                  )} %`}\n                />\n              </div>\n            </React.Fragment>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  mode: state.playerSeasons.mode,\n  perspective: state.playerSeasons.perspective\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SquadMemberCard);\n"]},"metadata":{},"sourceType":"module"}