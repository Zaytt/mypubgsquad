{"ast":null,"code":"import _intersectionBy from 'lodash.intersectionby';\n/**\n * @description Get the matches that the given players have played together\n * @param {Array<PlayerSeason>} playerSeasons an array of playerSeasons objects\n * @returns {Array<Matches>} containing arrays of matches that the players in [playerSeasons] have in common\n */\n\nvar getMatchesTogether = function getMatchesTogether(playerSeasons) {\n  var matchesTogether = playerSeasons[0].relationships.player.relationships.matches;\n\n  for (var i = 1; i < playerSeasons.length; i++) {\n    // Find duo matches that the players have in common\n    matchesTogether = _intersectionBy(matchesTogether, playerSeasons[i].relationships.player.relationships.matches, 'id');\n  }\n\n  return matchesTogether;\n};\n\nvar getRankTitle = function getRankTitle(rank) {\n  if (rank === 0) return 'Unranked';\n  var ranks = ['Beginner', 'Novice', 'Experienced', 'Skilled', 'Specialist', 'Expert', 'Survivor', 'LoneSurvivor'];\n  var index = Math.trunc(rank / 1000);\n  if (index === 5) return ranks[5];\n  if (index >= 6) return ranks[6];\n  return ranks[index];\n};\n\nvar getRankTitleLevel = function getRankTitleLevel(rank) {\n  if (rank === 0) return 'Unranked';\n  var levels = ['V', 'IV', 'III', 'II', 'I'];\n  var level = Math.trunc(rank % 1000 / 200);\n  return \"\".concat(getRankTitle(rank), \" \").concat(levels[level]);\n};\n\nvar sanitizeString = function sanitizeString(str) {\n  var newStr = str.replace(/[^a-z0-9áéíóúñü,.,_-]/gim, ' ');\n  return newStr.trim();\n};\n\nexport { getMatchesTogether, getRankTitle, getRankTitleLevel, sanitizeString };","map":{"version":3,"sources":["/Users/ivan/Documents/Developer/Portfolio-Projects/mypubgsquad/mypubgsquad-next/util/Util.js"],"names":["_intersectionBy","getMatchesTogether","playerSeasons","matchesTogether","relationships","player","matches","i","length","getRankTitle","rank","ranks","index","Math","trunc","getRankTitleLevel","levels","level","sanitizeString","str","newStr","replace","trim"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,uBAA5B;AAEA;;;;;;AAKA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,aAAa,EAAI;AAC1C,MAAIC,eAAe,GAAGD,aAAa,CAAC,CAAD,CAAb,CAAiBE,aAAjB,CAA+BC,MAA/B,CAAsCD,aAAtC,CAAoDE,OAA1E;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,aAAa,CAACM,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7C;AACAJ,IAAAA,eAAe,GAAGH,eAAe,CAC/BG,eAD+B,EAE/BD,aAAa,CAACK,CAAD,CAAb,CAAiBH,aAAjB,CAA+BC,MAA/B,CAAsCD,aAAtC,CAAoDE,OAFrB,EAG/B,IAH+B,CAAjC;AAKD;;AACD,SAAOH,eAAP;AACD,CAZD;;AAcA,IAAMM,YAAY,GAAG,SAAfA,YAAe,CAAAC,IAAI,EAAI;AAC3B,MAAIA,IAAI,KAAK,CAAb,EAAgB,OAAO,UAAP;AAEhB,MAAMC,KAAK,GAAG,CACZ,UADY,EAEZ,QAFY,EAGZ,aAHY,EAIZ,SAJY,EAKZ,YALY,EAMZ,QANY,EAOZ,UAPY,EAQZ,cARY,CAAd;AAUA,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWJ,IAAI,GAAG,IAAlB,CAAd;AAEA,MAAIE,KAAK,KAAK,CAAd,EAAiB,OAAOD,KAAK,CAAC,CAAD,CAAZ;AACjB,MAAIC,KAAK,IAAI,CAAb,EAAgB,OAAOD,KAAK,CAAC,CAAD,CAAZ;AAEhB,SAAOA,KAAK,CAACC,KAAD,CAAZ;AACD,CAnBD;;AAqBA,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAL,IAAI,EAAI;AAChC,MAAIA,IAAI,KAAK,CAAb,EAAgB,OAAO,UAAP;AAChB,MAAMM,MAAM,GAAG,CAAC,GAAD,EAAM,IAAN,EAAY,KAAZ,EAAmB,IAAnB,EAAyB,GAAzB,CAAf;AAEA,MAAMC,KAAK,GAAGJ,IAAI,CAACC,KAAL,CAAYJ,IAAI,GAAG,IAAR,GAAgB,GAA3B,CAAd;AAEA,mBAAUD,YAAY,CAACC,IAAD,CAAtB,cAAgCM,MAAM,CAACC,KAAD,CAAtC;AACD,CAPD;;AASA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,GAAG,EAAI;AAC5B,MAAIC,MAAM,GAAGD,GAAG,CAACE,OAAJ,CAAY,0BAAZ,EAAwC,GAAxC,CAAb;AACA,SAAOD,MAAM,CAACE,IAAP,EAAP;AACD,CAHD;;AAKA,SAASrB,kBAAT,EAA6BQ,YAA7B,EAA2CM,iBAA3C,EAA8DG,cAA9D","sourcesContent":["import _intersectionBy from 'lodash.intersectionby';\n\n/**\n * @description Get the matches that the given players have played together\n * @param {Array<PlayerSeason>} playerSeasons an array of playerSeasons objects\n * @returns {Array<Matches>} containing arrays of matches that the players in [playerSeasons] have in common\n */\nconst getMatchesTogether = playerSeasons => {\n  let matchesTogether = playerSeasons[0].relationships.player.relationships.matches;\n\n  for (let i = 1; i < playerSeasons.length; i++) {\n    // Find duo matches that the players have in common\n    matchesTogether = _intersectionBy(\n      matchesTogether,\n      playerSeasons[i].relationships.player.relationships.matches,\n      'id'\n    );\n  }\n  return matchesTogether;\n};\n\nconst getRankTitle = rank => {\n  if (rank === 0) return 'Unranked';\n\n  const ranks = [\n    'Beginner',\n    'Novice',\n    'Experienced',\n    'Skilled',\n    'Specialist',\n    'Expert',\n    'Survivor',\n    'LoneSurvivor'\n  ];\n  const index = Math.trunc(rank / 1000);\n\n  if (index === 5) return ranks[5];\n  if (index >= 6) return ranks[6];\n\n  return ranks[index];\n};\n\nconst getRankTitleLevel = rank => {\n  if (rank === 0) return 'Unranked';\n  const levels = ['V', 'IV', 'III', 'II', 'I'];\n\n  const level = Math.trunc((rank % 1000) / 200);\n\n  return `${getRankTitle(rank)} ${levels[level]}`;\n};\n\nconst sanitizeString = str => {\n  let newStr = str.replace(/[^a-z0-9áéíóúñü,.,_-]/gim, ' ');\n  return newStr.trim();\n};\n\nexport { getMatchesTogether, getRankTitle, getRankTitleLevel, sanitizeString };\n"]},"metadata":{},"sourceType":"module"}