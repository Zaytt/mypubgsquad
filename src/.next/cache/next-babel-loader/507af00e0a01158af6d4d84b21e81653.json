{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport _round from 'lodash.round';\nexport var SquadMemberRandomFact =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SquadMemberRandomFact, _Component);\n\n  function SquadMemberRandomFact() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SquadMemberRandomFact);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SquadMemberRandomFact)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"getFactText\", function (stat) {\n      switch (stat) {\n        case 'timeSurvived':\n          return {\n            actionMost: 'has <span class=\"text-info\">survived</span> for',\n            actionAvg: 'has <span class=\"text-info\">survived</span> for an average of',\n            unitMost: ', the longest of the whole squad.',\n            unitAvg: ' each round.'\n          };\n\n        case 'alive':\n          return {\n            actionAvg: 'has survived <span class=\"text-info\"> all the way</span> to the end to enjoy his <span class=\"text-warning\">chicken dinner</span>',\n            unitAvg: 'times'\n          };\n\n        case 'zoneDeaths':\n          return {\n            actionMost: 'has been killed by the <span class=\"text-info\">zone</span>',\n            unitMost: 'times, more than any other squad member.'\n          };\n\n        case 'teamKills':\n          return {\n            actionMost: 'has commited',\n            unitMost: '<span class=\"text-danger\">team kills</span>, more than any other squad member. Shame on him.'\n          };\n\n        case 'headshotKills':\n          return {\n            actionMost: 'has shot ',\n            unitMost: 'players in the <span class=\"text-info\">face</span>!. Glorious!'\n          };\n\n        case 'roadKills':\n          return {\n            actionMost: 'has <span class=\"text-success\">ran over</span>',\n            unitMost: 'players.<br>Awesome!'\n          };\n\n        case 'revives':\n          return {\n            actionMost: 'has <span class=\"text-info\">revived</span> his teammates',\n            unitMost: 'times.<br>Hero!'\n          };\n\n        case 'swimDistance':\n          return {\n            actionMost: 'has <span class=\"text-info\">swum</span> over',\n            unitMost: 'meters.<br>Pretty impressive considering he was carrying over 50kg of guns, explosives and energy drinks.'\n          };\n\n        case 'walkDistance':\n          return {\n            actionMost: 'has <span class=\"text-info\">walked</span> over',\n            actionAvg: 'walks around',\n            unitMost: 'kilometers.',\n            unitAvg: '<span class=\"text-info\">kilometers</span> per round.'\n          };\n\n        case 'vehicleDestroys':\n          return {\n            actionMost: 'has <span class=\"text-success\">destroyed</span>',\n            unitMost: 'vehicles.<br>Nice!'\n          };\n\n        case 'weaponsAcquired':\n          return {\n            actionMost: 'has picked up',\n            actionAvg: 'has picked up an average of',\n            unitMost: \"<span class=\\\"text-success\\\">weapons</span>.\",\n            unitAvg: '<span class=\"text-success\">weapons</span> per match. Yep, running out of random stats here.'\n          };\n\n        default:\n          return null;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"calculateRandomFact\", function () {\n      var factsAvailable = ['timeSurvived', 'survived', 'zoneDeaths', 'teamKills', 'roadKills', 'revives', 'swimDistance', 'walkDistance', 'vehicleDestroys', 'weaponsAcquired'];\n\n      var facts = _this.props.stats.badges.filter(function (badge) {\n        return factsAvailable.includes(badge.stat);\n      });\n\n      var fact = facts.length > 0 ? facts[Math.floor(Math.random() * (facts.length - 1))] : false;\n      if (!fact) return _this.calculateRandomAvgFact();else {\n        var factText = _this.getFactText(fact.stat);\n\n        var factValue = fact.stat === 'walkDistance' ? _round(fact.value / 1000, 1) : fact.stat === 'timeSurvived' ? _this.convertSeconds(_round(fact.value, 0)) : fact.value % 1 === 0 ? fact.value : _round(fact.value, 1);\n        return \"\".concat(factText.actionMost, \" \").concat(factValue, \" \").concat(factText.unitMost);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"calculateRandomAvgFact\", function () {\n      var factsAvailable = ['alive', 'timeSurvived', 'walkDistance', 'weaponsAcquired'];\n      var _this$props = _this.props,\n          stats = _this$props.stats,\n          rounds = _this$props.rounds;\n      var facts = factsAvailable.filter(function (fact) {\n        return _this.props.stats[fact] > 0;\n      });\n      var fact = facts[Math.floor(Math.random() * (facts.length - 1))];\n      var factValue = fact === 'walkDistance' ? _round(stats[fact] / (1000 * rounds), 1) : fact === 'timeSurvived' ? _this.convertSeconds(_round(stats[fact] / rounds, 0)) : fact === 'alive' ? stats[fact] : _round(stats[fact] / rounds, 0);\n\n      var factText = _this.getFactText(fact);\n\n      return \"\".concat(factText.actionAvg, \" \").concat(factValue, \" \").concat(factText.unitAvg);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"convertSeconds\", function (sec) {\n      var hrs = Math.floor(sec / 3600);\n      var min = Math.floor((sec - hrs * 3600) / 60);\n      var seconds = sec - hrs * 3600 - min * 60;\n      seconds = Math.round(seconds * 100) / 100;\n      var result = hrs === 0 ? '' : hrs === 1 ? \"\".concat(hrs, \" hour\") : \"\".concat(hrs, \" hours\");\n      result += (hrs > 0 ? ', ' : '') + (min === 1 ? \"\".concat(min, \" minute\") : \"\".concat(min, \" minutes\"));\n      result += (hrs === 0 && min === 0 ? ' ' : ' and ') + (seconds === 1 ? \"\".concat(seconds, \" second\") : \"\".concat(seconds, \" seconds\"));\n      return result;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getRandomFact\", function () {\n      var chance = Math.floor(Math.random() * 100);\n      if (chance < 60) return _this.calculateRandomFact();else return _this.calculateRandomAvgFact();\n    });\n\n    return _this;\n  }\n\n  _createClass(SquadMemberRandomFact, [{\n    key: \"render\",\n    value: function render() {\n      var randomFact = this.getRandomFact();\n      return React.createElement(\"div\", {\n        className: \"row d-flex justify-content-center\"\n      }, React.createElement(\"div\", {\n        className: \"col-10\"\n      }, React.createElement(\"h5\", {\n        className: \"mb-3\"\n      }, \"Random fact: \"), React.createElement(\"p\", {\n        className: \"lead\"\n      }, ' ', React.createElement(\"span\", {\n        className: \"text-warning\"\n      }, \"\".concat(this.props.player, \" \")), React.createElement(\"span\", {\n        dangerouslySetInnerHTML: {\n          __html: randomFact\n        }\n      }))));\n    }\n  }]);\n\n  return SquadMemberRandomFact;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {};\n};\n\nvar mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(SquadMemberRandomFact);","map":null,"metadata":{},"sourceType":"module"}