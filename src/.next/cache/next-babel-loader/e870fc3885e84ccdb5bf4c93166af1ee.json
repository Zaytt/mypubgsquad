{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs2/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\"));\n\nvar pubgAPI = require('../../pubg_api/pubg');\n\nvar _require = require('../../cache/cacheController'),\n    getCachedSeasons = _require.getCachedSeasons,\n    setCachedSeasons = _require.setCachedSeasons;\n\nvar storeSeasons =\n/*#__PURE__*/\nfunction () {\n  var _ref = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee() {\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return pubgAPI.getSeasons();\n\n          case 2:\n            seasons = _context.sent;\n            _context.next = 5;\n            return setCachedSeasons(seasons).then(function (res) {\n              return console.log('Stored Seasons in Cache');\n            })[\"catch\"](function (err) {\n              console.warn('Failed to store seasons in cache');\n              throw err;\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function storeSeasons() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar getSeasons =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee2() {\n    var seasons;\n    return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return getCachedSeasons();\n\n          case 2:\n            seasons = _context2.sent;\n\n            if (!seasons) {\n              _context2.next = 7;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", seasons);\n\n          case 7:\n            _context2.next = 9;\n            return pubgAPI.getSeasons();\n\n          case 9:\n            seasons = _context2.sent;\n            _context2.next = 12;\n            return setCachedSeasons(seasons)[\"catch\"](function (err) {\n              throw err;\n            });\n\n          case 12:\n            return _context2.abrupt(\"return\", seasons);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getSeasons() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar getCurrentSeason =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee3() {\n    var seasons;\n    return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return getSeasons();\n\n          case 2:\n            seasons = _context3.sent;\n            return _context3.abrupt(\"return\", seasons.filter(function (season) {\n              return season.attributes.isCurrentSeason;\n            })[0]);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getCurrentSeason() {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nmodule.exports = {\n  storeSeasons: storeSeasons,\n  getSeasons: getSeasons,\n  getCurrentSeason: getCurrentSeason\n};","map":{"version":3,"sources":["/Users/ivan/Documents/Developer/Portfolio-Projects/mypubgsquad/mypubgsquad-next/src/server/routes/controllers/seasonsController.js"],"names":["pubgAPI","require","getCachedSeasons","setCachedSeasons","storeSeasons","getSeasons","seasons","then","res","console","log","err","warn","getCurrentSeason","filter","season","attributes","isCurrentSeason","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,qBAAD,CAAvB;;eAC+CA,OAAO,CAAC,6BAAD,C;IAA9CC,gB,YAAAA,gB;IAAkBC,gB,YAAAA,gB;;AAE1B,IAAMC,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACHJ,OAAO,CAACK,UAAR,EADG;;AAAA;AACnBC,YAAAA,OADmB;AAAA;AAAA,mBAEbH,gBAAgB,CAACG,OAAD,CAAhB,CACHC,IADG,CACE,UAAAC,GAAG;AAAA,qBAAIC,OAAO,CAACC,GAAR,CAAY,yBAAZ,CAAJ;AAAA,aADL,WAEG,UAAAC,GAAG,EAAI;AACZF,cAAAA,OAAO,CAACG,IAAR,CAAa,kCAAb;AACA,oBAAMD,GAAN;AACD,aALG,CAFa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZP,YAAY;AAAA;AAAA;AAAA,GAAlB;;AAUA,IAAMC,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACGH,gBAAgB,EADnB;;AAAA;AACbI,YAAAA,OADa;;AAAA,iBAGbA,OAHa;AAAA;AAAA;AAAA;;AAAA,8CAIRA,OAJQ;;AAAA;AAAA;AAAA,mBAMCN,OAAO,CAACK,UAAR,EAND;;AAAA;AAMfC,YAAAA,OANe;AAAA;AAAA,mBAOTH,gBAAgB,CAACG,OAAD,CAAhB,UAAgC,UAAAK,GAAG,EAAI;AAC3C,oBAAMA,GAAN;AACD,aAFK,CAPS;;AAAA;AAAA,8CAURL,OAVQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVD,UAAU;AAAA;AAAA;AAAA,GAAhB;;AAcA,IAAMQ,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACDR,UAAU,EADT;;AAAA;AACjBC,YAAAA,OADiB;AAAA,8CAEhBA,OAAO,CAACQ,MAAR,CAAe,UAAAC,MAAM;AAAA,qBAAIA,MAAM,CAACC,UAAP,CAAkBC,eAAtB;AAAA,aAArB,EAA4D,CAA5D,CAFgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBJ,gBAAgB;AAAA;AAAA;AAAA,GAAtB;;AAKAK,MAAM,CAACC,OAAP,GAAiB;AACff,EAAAA,YAAY,EAAZA,YADe;AAEfC,EAAAA,UAAU,EAAVA,UAFe;AAGfQ,EAAAA,gBAAgB,EAAhBA;AAHe,CAAjB","sourcesContent":["const pubgAPI = require('../../pubg_api/pubg');\nconst { getCachedSeasons, setCachedSeasons } = require('../../cache/cacheController');\n\nconst storeSeasons = async () => {\n  seasons = await pubgAPI.getSeasons();\n  await setCachedSeasons(seasons)\n    .then(res => console.log('Stored Seasons in Cache'))\n    .catch(err => {\n      console.warn('Failed to store seasons in cache');\n      throw err;\n    });\n};\n\nconst getSeasons = async () => {\n  let seasons = await getCachedSeasons();\n\n  if (seasons) {\n    return seasons;\n  } else {\n    seasons = await pubgAPI.getSeasons();\n    await setCachedSeasons(seasons).catch(err => {\n      throw err;\n    });\n    return seasons;\n  }\n};\n\nconst getCurrentSeason = async () => {\n  const seasons = await getSeasons();\n  return seasons.filter(season => season.attributes.isCurrentSeason)[0];\n};\n\nmodule.exports = {\n  storeSeasons,\n  getSeasons,\n  getCurrentSeason\n};\n"]},"metadata":{},"sourceType":"script"}