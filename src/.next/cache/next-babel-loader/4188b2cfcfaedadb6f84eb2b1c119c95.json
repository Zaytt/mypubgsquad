{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport _round from 'lodash.round';\nimport Header from './SquadMemberCardHeader';\nimport Stat from './SquadMemberCardStat';\nimport Separator from '../../common/Separator';\n\nvar SquadMemberCard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SquadMemberCard, _Component);\n\n  function SquadMemberCard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SquadMemberCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SquadMemberCard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"secondsToMinutes\", function (secs) {\n      secs = _round(secs);\n      var minutes = Math.floor(_round(secs) / 60);\n      var seconds = _round(secs) - minutes * 60;\n      return \"\".concat(minutes, \":\").concat(seconds);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkZeroGames\", function (stat, rounds) {\n      return rounds === 0 ? '0' : stat;\n    });\n\n    return _this;\n  }\n\n  _createClass(SquadMemberCard, [{\n    key: \"render\",\n    value: function render() {\n      var gameMode = this.props.mode + this.props.perspective;\n      var name = this.props.playerSeason.relationships.player.attributes.name;\n      var _this$props$playerSea = this.props.playerSeason.attributes.gameModeStats[gameMode],\n          rankPoints = _this$props$playerSea.rankPoints,\n          kills = _this$props$playerSea.kills,\n          roundMostKills = _this$props$playerSea.roundMostKills,\n          roundsPlayed = _this$props$playerSea.roundsPlayed,\n          damageDealt = _this$props$playerSea.damageDealt,\n          timeSurvived = _this$props$playerSea.timeSurvived,\n          longestKill = _this$props$playerSea.longestKill,\n          headshotKills = _this$props$playerSea.headshotKills,\n          wins = _this$props$playerSea.wins,\n          top10s = _this$props$playerSea.top10s;\n      return React.createElement(\"div\", {\n        className: \"card h-100 w-100 bg-dark text-light border-secondary stat-card\"\n      }, React.createElement(\"div\", {\n        className: \"card-body\"\n      }, React.createElement(Header, {\n        playername: name,\n        rank: rankPoints,\n        gamesPlayed: roundsPlayed,\n        wins: wins,\n        top10s: top10s,\n        kills: kills\n      }), React.createElement(Separator, {\n        color: \"secondary\",\n        margin: \"0\",\n        length: \"12\"\n      }), roundsPlayed === 0 ? React.createElement(\"h3\", {\n        className: \"text-center h-50 d-flex justify-content-center align-items-center\"\n      }, \"No rounds played\") : React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(Stat, {\n        stat: \"KDR\",\n        value: this.checkZeroGames(_round(kills / roundsPlayed, 2), roundsPlayed),\n        bold: true\n      }), React.createElement(Stat, {\n        stat: \"Avg. Damage\",\n        value: this.checkZeroGames(_round(damageDealt / roundsPlayed, 2), roundsPlayed),\n        bold: true\n      })), React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(Stat, {\n        stat: \"Most Kills\",\n        value: roundMostKills\n      }), React.createElement(Stat, {\n        stat: \"Avg. Time Survived\",\n        value: this.checkZeroGames(this.secondsToMinutes(timeSurvived / roundsPlayed), roundsPlayed)\n      })), React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(Stat, {\n        stat: \"Longest Kill\",\n        value: \"\".concat(this.checkZeroGames(_round(longestKill), roundsPlayed), \" m\")\n      }), React.createElement(Stat, {\n        stat: \"Headshot\",\n        value: \"\".concat(this.checkZeroGames(_round(headshotKills / kills * 100, 1), roundsPlayed), \" %\")\n      })), React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(Stat, {\n        stat: \"Win %\",\n        value: \"\".concat(this.checkZeroGames(_round(wins / roundsPlayed * 100, 1), roundsPlayed), \" %\")\n      }), React.createElement(Stat, {\n        stat: \"Top 10 %\",\n        value: \"\".concat(this.checkZeroGames(_round(top10s / roundsPlayed * 100, 1), roundsPlayed), \" %\")\n      })))));\n    }\n  }]);\n\n  return SquadMemberCard;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    mode: state.playerSeasons.mode,\n    perspective: state.playerSeasons.perspective\n  };\n};\n\nvar mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(SquadMemberCard);","map":null,"metadata":{},"sourceType":"module"}