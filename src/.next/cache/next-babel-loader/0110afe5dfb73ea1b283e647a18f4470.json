{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/array/is-array\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs2/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\"));\n\nvar _ = require('lodash');\n\nvar seasonsController = require('./seasonsController');\n\nvar cache = require('../../cache/cacheController');\n\nvar _require = require('../../core/statsAnalysis'),\n    getPlayersSeasonStats = _require.getPlayersSeasonStats,\n    getSquadStatsFromMatches = _require.getSquadStatsFromMatches;\n\nvar test =\n/*#__PURE__*/\nfunction () {\n  var _ref = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee(req, res) {\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            res.json(req.query);\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function test(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * @route GET /api/stats?squad=[playernames]&season=[seasonid]\n * @description Returns the stats of a squad of players for a given season\n * @returns {<Array<PlayerSeasons>>} An array of filtered pubg.js PlayerSeasons objects.\n * @access Public\n */\n\n\nvar getSquadStats =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee2(req, res) {\n    var _req$query, squad, season, refresh, currentSeason, playerNamesArray, playersStats, fetchedPlayers, _ref3, cachedPlayers, nonCachedPlayers, newCachedPlayers;\n\n    return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _req$query = req.query, squad = _req$query.squad, season = _req$query.season, refresh = _req$query.refresh;\n\n            if (season) {\n              _context2.next = 6;\n              break;\n            }\n\n            _context2.next = 4;\n            return seasonsController.getCurrentSeason();\n\n          case 4:\n            currentSeason = _context2.sent;\n            season = currentSeason.id;\n\n          case 6:\n            playerNamesArray = squad.split(',');\n            _context2.prev = 7;\n\n            if (!refresh) {\n              _context2.next = 15;\n              break;\n            }\n\n            _context2.next = 11;\n            return getPlayersSeasonStats(playerNamesArray, season);\n\n          case 11:\n            fetchedPlayers = _context2.sent;\n            playersStats = (0, _isArray[\"default\"])(fetchedPlayers) ? fetchedPlayers.map(function (p) {\n              return _.pick(p, ['attributes', 'relationships.player', 'relationships.season']);\n            }) : _.pick(fetchedPlayers, ['attributes', 'relationships.player', 'relationships.season']);\n            _context2.next = 29;\n            break;\n\n          case 15:\n            _context2.next = 17;\n            return cache.getCachedPlayerSeasons(playerNamesArray);\n\n          case 17:\n            _ref3 = _context2.sent;\n            cachedPlayers = _ref3.cachedPlayers;\n            nonCachedPlayers = _ref3.nonCachedPlayers;\n\n            if (!(nonCachedPlayers.length > 0)) {\n              _context2.next = 28;\n              break;\n            }\n\n            _context2.next = 23;\n            return getPlayersSeasonStats(nonCachedPlayers, season);\n\n          case 23:\n            fetchedPlayers = _context2.sent;\n            newCachedPlayers = (0, _isArray[\"default\"])(fetchedPlayers) ? fetchedPlayers.map(function (p) {\n              return _.pick(p, ['attributes', 'relationships.player', 'relationships.season']);\n            }) : _.pick(fetchedPlayers, ['attributes', 'relationships.player', 'relationships.season']); // Cache the fetched players\n\n            _context2.next = 27;\n            return cache.setCachedPlayerSeasons(newCachedPlayers);\n\n          case 27:\n            cachedPlayers = cachedPlayers.concat(newCachedPlayers);\n\n          case 28:\n            playersStats = cachedPlayers;\n\n          case 29:\n            res.status(200).json(playersStats);\n            _context2.next = 35;\n            break;\n\n          case 32:\n            _context2.prev = 32;\n            _context2.t0 = _context2[\"catch\"](7);\n\n            if (_context2.t0.message.status) {\n              res.status(_context2.t0.message.status).json(_context2.t0.message);\n            } else if (_context2.t0.status) {\n              res.status(_context2.t0.status).json(_context2.t0);\n            } else {\n              res.status(_context2.t0).json(_context2.t0.message);\n            }\n\n          case 35:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[7, 32]]);\n  }));\n\n  return function getSquadStats(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/**\n * @route GET /api/stats/matches\n * @description returns the stats of players from the matches that they have played together this season\n */\n\n\nvar getSquadMatchesStats =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee3(req, res) {\n    var _req$body, matches, playerNames;\n\n    return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _req$body = req.body, matches = _req$body.matches, playerNames = _req$body.playerNames;\n            _context3.prev = 1;\n            _context3.t0 = res.status(200);\n            _context3.next = 5;\n            return getSquadStatsFromMatches(matches, playerNames);\n\n          case 5:\n            _context3.t1 = _context3.sent;\n\n            _context3.t0.json.call(_context3.t0, _context3.t1);\n\n            _context3.next = 13;\n            break;\n\n          case 9:\n            _context3.prev = 9;\n            _context3.t2 = _context3[\"catch\"](1);\n            console.log(_context3.t2);\n\n            if (_context3.t2.status) {\n              res.status(_context3.t2.status).json({\n                error: _context3.t2.status,\n                message: _context3.t2.message\n              });\n            } else {\n              res.status(500).json({\n                error: 500,\n                message: _context3.t2.message\n              });\n            }\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[1, 9]]);\n  }));\n\n  return function getSquadMatchesStats(_x5, _x6) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nmodule.exports = {\n  test: test,\n  getSquadStats: getSquadStats,\n  getSquadMatchesStats: getSquadMatchesStats\n};","map":{"version":3,"sources":["/Users/ivan/Documents/Developer/Portfolio-Projects/mypubgsquad/mypubgsquad-next/src/server/routes/controllers/statsController.js"],"names":["_","require","seasonsController","cache","getPlayersSeasonStats","getSquadStatsFromMatches","test","req","res","json","query","getSquadStats","squad","season","refresh","getCurrentSeason","currentSeason","id","playerNamesArray","split","fetchedPlayers","playersStats","map","p","pick","getCachedPlayerSeasons","cachedPlayers","nonCachedPlayers","length","newCachedPlayers","setCachedPlayerSeasons","concat","status","message","getSquadMatchesStats","body","matches","playerNames","console","log","error","module","exports"],"mappings":";;;;;;;;;;AAAA,IAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,qBAAD,CAAjC;;AACA,IAAME,KAAK,GAAGF,OAAO,CAAC,6BAAD,CAArB;;eAE4DA,OAAO,CAAC,0BAAD,C;IAA3DG,qB,YAAAA,qB;IAAuBC,wB,YAAAA,wB;;AAE/B,IAAMC,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AACXA,YAAAA,GAAG,CAACC,IAAJ,CAASF,GAAG,CAACG,KAAb;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAJJ,IAAI;AAAA;AAAA;AAAA,GAAV;AAGA;;;;;;;;AAMA,IAAMK,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG,kBAAOJ,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yBACaD,GAAG,CAACG,KADjB,EACdE,KADc,cACdA,KADc,EACPC,MADO,cACPA,MADO,EACCC,OADD,cACCA,OADD;;AAAA,gBAEfD,MAFe;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGQX,iBAAiB,CAACa,gBAAlB,EAHR;;AAAA;AAGdC,YAAAA,aAHc;AAIlBH,YAAAA,MAAM,GAAGG,aAAa,CAACC,EAAvB;;AAJkB;AAOdC,YAAAA,gBAPc,GAOKN,KAAK,CAACO,KAAN,CAAY,GAAZ,CAPL;AAAA;;AAAA,iBAYdL,OAZc;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAaOV,qBAAqB,CAACc,gBAAD,EAAmBL,MAAnB,CAb5B;;AAAA;AAahBO,YAAAA,cAbgB;AAchBC,YAAAA,YAAY,GAAG,yBAAcD,cAAd,IACXA,cAAc,CAACE,GAAf,CAAmB,UAAAC,CAAC;AAAA,qBAClBvB,CAAC,CAACwB,IAAF,CAAOD,CAAP,EAAU,CAAC,YAAD,EAAe,sBAAf,EAAuC,sBAAvC,CAAV,CADkB;AAAA,aAApB,CADW,GAIXvB,CAAC,CAACwB,IAAF,CAAOJ,cAAP,EAAuB,CAAC,YAAD,EAAe,sBAAf,EAAuC,sBAAvC,CAAvB,CAJJ;AAdgB;AAAA;;AAAA;AAAA;AAAA,mBAqBgCjB,KAAK,CAACsB,sBAAN,CAC9CP,gBAD8C,CArBhC;;AAAA;AAAA;AAqBVQ,YAAAA,aArBU,SAqBVA,aArBU;AAqBKC,YAAAA,gBArBL,SAqBKA,gBArBL;;AAAA,kBAyBZA,gBAAgB,CAACC,MAAjB,GAA0B,CAzBd;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA0BSxB,qBAAqB,CAACuB,gBAAD,EAAmBd,MAAnB,CA1B9B;;AAAA;AA0BdO,YAAAA,cA1Bc;AA2BRS,YAAAA,gBA3BQ,GA2BW,yBAAcT,cAAd,IACrBA,cAAc,CAACE,GAAf,CAAmB,UAAAC,CAAC;AAAA,qBAClBvB,CAAC,CAACwB,IAAF,CAAOD,CAAP,EAAU,CAAC,YAAD,EAAe,sBAAf,EAAuC,sBAAvC,CAAV,CADkB;AAAA,aAApB,CADqB,GAIrBvB,CAAC,CAACwB,IAAF,CAAOJ,cAAP,EAAuB,CAAC,YAAD,EAAe,sBAAf,EAAuC,sBAAvC,CAAvB,CA/BU,EAgCd;;AAhCc;AAAA,mBAiCRjB,KAAK,CAAC2B,sBAAN,CAA6BD,gBAA7B,CAjCQ;;AAAA;AAkCdH,YAAAA,aAAa,GAAGA,aAAa,CAACK,MAAd,CAAqBF,gBAArB,CAAhB;;AAlCc;AAoChBR,YAAAA,YAAY,GAAGK,aAAf;;AApCgB;AAsClBlB,YAAAA,GAAG,CAACwB,MAAJ,CAAW,GAAX,EAAgBvB,IAAhB,CAAqBY,YAArB;AAtCkB;AAAA;;AAAA;AAAA;AAAA;;AAwClB,gBAAI,aAAMY,OAAN,CAAcD,MAAlB,EAA0B;AACxBxB,cAAAA,GAAG,CAACwB,MAAJ,CAAW,aAAMC,OAAN,CAAcD,MAAzB,EAAiCvB,IAAjC,CAAsC,aAAMwB,OAA5C;AACD,aAFD,MAEO,IAAI,aAAMD,MAAV,EAAkB;AACvBxB,cAAAA,GAAG,CAACwB,MAAJ,CAAW,aAAMA,MAAjB,EAAyBvB,IAAzB;AACD,aAFM,MAEA;AACLD,cAAAA,GAAG,CAACwB,MAAJ,eAAkBvB,IAAlB,CAAuB,aAAMwB,OAA7B;AACD;;AA9CiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbtB,aAAa;AAAA;AAAA;AAAA,GAAnB;AAkDA;;;;;;AAIA,IAAMuB,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAG,kBAAO3B,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACID,GAAG,CAAC4B,IADR,EACrBC,OADqB,aACrBA,OADqB,EACZC,WADY,aACZA,WADY;AAAA;AAAA,2BAGzB7B,GAAG,CAACwB,MAAJ,CAAW,GAAX,CAHyB;AAAA;AAAA,mBAGE3B,wBAAwB,CAAC+B,OAAD,EAAUC,WAAV,CAH1B;;AAAA;AAAA;;AAAA,yBAGT5B,IAHS;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKzB6B,YAAAA,OAAO,CAACC,GAAR;;AACA,gBAAI,aAAMP,MAAV,EAAkB;AAChBxB,cAAAA,GAAG,CAACwB,MAAJ,CAAW,aAAMA,MAAjB,EAAyBvB,IAAzB,CAA8B;AAC5B+B,gBAAAA,KAAK,EAAE,aAAMR,MADe;AAE5BC,gBAAAA,OAAO,EAAE,aAAMA;AAFa,eAA9B;AAID,aALD,MAKO;AACLzB,cAAAA,GAAG,CAACwB,MAAJ,CAAW,GAAX,EAAgBvB,IAAhB,CAAqB;AACnB+B,gBAAAA,KAAK,EAAE,GADY;AAEnBP,gBAAAA,OAAO,EAAE,aAAMA;AAFI,eAArB;AAID;;AAhBwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAApBC,oBAAoB;AAAA;AAAA;AAAA,GAA1B;;AAoBAO,MAAM,CAACC,OAAP,GAAiB;AACfpC,EAAAA,IAAI,EAAJA,IADe;AAEfK,EAAAA,aAAa,EAAbA,aAFe;AAGfuB,EAAAA,oBAAoB,EAApBA;AAHe,CAAjB","sourcesContent":["const _ = require('lodash');\nconst seasonsController = require('./seasonsController');\nconst cache = require('../../cache/cacheController');\n\nconst { getPlayersSeasonStats, getSquadStatsFromMatches } = require('../../core/statsAnalysis');\n\nconst test = async (req, res) => {\n  res.json(req.query);\n};\n/**\n * @route GET /api/stats?squad=[playernames]&season=[seasonid]\n * @description Returns the stats of a squad of players for a given season\n * @returns {<Array<PlayerSeasons>>} An array of filtered pubg.js PlayerSeasons objects.\n * @access Public\n */\nconst getSquadStats = async (req, res) => {\n  let { squad, season, refresh } = req.query;\n  if (!season) {\n    let currentSeason = await seasonsController.getCurrentSeason();\n    season = currentSeason.id;\n  }\n\n  const playerNamesArray = squad.split(',');\n\n  try {\n    let playersStats, fetchedPlayers;\n    // If refresh == true, skip checking for cached players\n    if (refresh) {\n      fetchedPlayers = await getPlayersSeasonStats(playerNamesArray, season);\n      playersStats = Array.isArray(fetchedPlayers)\n        ? fetchedPlayers.map(p =>\n            _.pick(p, ['attributes', 'relationships.player', 'relationships.season'])\n          )\n        : _.pick(fetchedPlayers, ['attributes', 'relationships.player', 'relationships.season']);\n    } else {\n      // Check cache for stored players\n      let { cachedPlayers, nonCachedPlayers } = await cache.getCachedPlayerSeasons(\n        playerNamesArray\n      );\n      // If there's non cached players, fetch them\n      if (nonCachedPlayers.length > 0) {\n        fetchedPlayers = await getPlayersSeasonStats(nonCachedPlayers, season);\n        const newCachedPlayers = Array.isArray(fetchedPlayers)\n          ? fetchedPlayers.map(p =>\n              _.pick(p, ['attributes', 'relationships.player', 'relationships.season'])\n            )\n          : _.pick(fetchedPlayers, ['attributes', 'relationships.player', 'relationships.season']);\n        // Cache the fetched players\n        await cache.setCachedPlayerSeasons(newCachedPlayers);\n        cachedPlayers = cachedPlayers.concat(newCachedPlayers);\n      }\n      playersStats = cachedPlayers;\n    }\n    res.status(200).json(playersStats);\n  } catch (error) {\n    if (error.message.status) {\n      res.status(error.message.status).json(error.message);\n    } else if (error.status) {\n      res.status(error.status).json(error);\n    } else {\n      res.status(error).json(error.message);\n    }\n  }\n};\n\n/**\n * @route GET /api/stats/matches\n * @description returns the stats of players from the matches that they have played together this season\n */\nconst getSquadMatchesStats = async (req, res) => {\n  let { matches, playerNames } = req.body;\n  try {\n    res.status(200).json(await getSquadStatsFromMatches(matches, playerNames));\n  } catch (error) {\n    console.log(error);\n    if (error.status) {\n      res.status(error.status).json({\n        error: error.status,\n        message: error.message\n      });\n    } else {\n      res.status(500).json({\n        error: 500,\n        message: error.message\n      });\n    }\n  }\n};\n\nmodule.exports = {\n  test,\n  getSquadStats,\n  getSquadMatchesStats\n};\n"]},"metadata":{},"sourceType":"script"}