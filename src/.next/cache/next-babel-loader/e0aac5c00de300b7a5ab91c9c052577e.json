{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport _isEmpty from 'lodash.isempty';\nimport _round from 'lodash.round';\nimport Separator from '../../common/Separator';\nimport SquadMemberStatsHeader from './SquadMemberStatsHeader';\nimport StatRow from './StatRow';\nimport { selectPlayer } from '../../../redux/actions/togetherStatsActions';\nimport { SquadMemberRandomFact } from './SquadMemberRandomFact';\nexport var SquadMemberStats =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SquadMemberStats, _Component);\n\n  function SquadMemberStats() {\n    _classCallCheck(this, SquadMemberStats);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SquadMemberStats).apply(this, arguments));\n  }\n\n  _createClass(SquadMemberStats, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          player = _this$props.player,\n          stats = _this$props.stats,\n          mode = _this$props.mode,\n          perspective = _this$props.perspective,\n          squad = _this$props.squad;\n      var gameMode = mode + perspective;\n\n      if (_isEmpty(stats)) {\n        return '';\n      }\n\n      if (!squad.includes(player)) {\n        this.props.selectPlayer(squad[0]);\n        player = squad[0];\n      }\n\n      var badges = stats[gameMode].stats[player].badges;\n      var playerStats = stats[gameMode].stats[player];\n      var squadStats = stats[gameMode].stats.teamTotal;\n      var gamesPlayed = stats[gameMode].gamesPlayed;\n      return React.createElement(\"div\", {\n        className: \"row  d-flex justify-content-center text-light \"\n      }, React.createElement(\"div\", {\n        className: \"col-lg-8 col-md-10 col-12 text-center\"\n      }, React.createElement(\"div\", {\n        className: \"bg-dark text-light border-secondary stat-card mb-5 rounded-bottom\"\n      }, React.createElement(\"div\", {\n        className: \"card-body\"\n      }, React.createElement(SquadMemberStatsHeader, {\n        player: player,\n        badges: badges\n      }), React.createElement(Separator, {\n        color: \"secondary\",\n        length: 10,\n        margin: 4\n      }), React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(\"div\", {\n        className: \"col-12\"\n      }, React.createElement(StatRow, {\n        label: \"Kills\",\n        playerStat: playerStats.kills,\n        squadStat: squadStats.kills,\n        type: \"total\"\n      }), React.createElement(StatRow, {\n        label: \"K/D\",\n        playerStat: _round(playerStats.kills / gamesPlayed, 2),\n        squadStat: _round(squadStats.kills / (gamesPlayed * squad.length), 2),\n        type: \"avg\"\n      }), React.createElement(StatRow, {\n        label: \"Total Damage\",\n        playerStat: _round(playerStats.damageDealt, 0),\n        squadStat: _round(squadStats.damageDealt, 0),\n        type: \"total\"\n      }), React.createElement(StatRow, {\n        label: \"Avg. Damage\",\n        playerStat: _round(playerStats.damageDealt / gamesPlayed, 0),\n        squadStat: _round(squadStats.damageDealt / (gamesPlayed * squad.length), 0),\n        type: \"avg\"\n      }), React.createElement(StatRow, {\n        label: \"% Headshot Kills\",\n        playerStat: _round(playerStats.headshotKills / playerStats.kills * 100, 1),\n        squadStat: _round(squadStats.headshotKills / squadStats.kills * 100, 1),\n        type: \"avg\",\n        unit: \"%\"\n      }), React.createElement(StatRow, {\n        label: \"Longest Kill\",\n        playerStat: _round(playerStats.longestKill, 0),\n        squadStat: _round(squadStats.longestKill, 0),\n        type: \"distance\",\n        unit: \"m\",\n        nokills: playerStats.kills === 0\n      }))), React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(\"div\", {\n        className: \"col-12\"\n      }, React.createElement(Separator, {\n        color: \"secondary\",\n        length: 10,\n        margin: 4\n      }), React.createElement(SquadMemberRandomFact, {\n        player: player,\n        stats: playerStats,\n        rounds: gamesPlayed\n      })))))));\n    }\n  }]);\n\n  return SquadMemberStats;\n}(Component);\n\n_defineProperty(SquadMemberStats, \"propTypes\", {\n  player: PropTypes.string.isRequired,\n  stats: PropTypes.object.isRequired,\n  mode: PropTypes.string.isRequired,\n  perspective: PropTypes.string.isRequired,\n  squad: PropTypes.array.isRequired\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    player: state.squad.selectedPlayer,\n    stats: state.squad.stats,\n    mode: state.squad.mode,\n    perspective: state.squad.perspective,\n    squad: state.squad.membersFetched\n  };\n};\n\nvar mapDispatchToProps = {\n  selectPlayer: selectPlayer\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(SquadMemberStats);","map":{"version":3,"sources":["/Users/ivan/Documents/Developer/Portfolio-Projects/mypubgsquad/mypubgsquad-next/src/components/stats_page/SquadStats/SquadMemberStats.js"],"names":["React","Component","PropTypes","connect","_isEmpty","_round","Separator","SquadMemberStatsHeader","StatRow","selectPlayer","SquadMemberRandomFact","SquadMemberStats","props","player","stats","mode","perspective","squad","gameMode","includes","badges","playerStats","squadStats","teamTotal","gamesPlayed","kills","length","damageDealt","headshotKills","longestKill","string","isRequired","object","array","mapStateToProps","state","selectedPlayer","membersFetched","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport _isEmpty from 'lodash.isempty';\nimport _round from 'lodash.round';\nimport Separator from '../../common/Separator';\nimport SquadMemberStatsHeader from './SquadMemberStatsHeader';\nimport StatRow from './StatRow';\nimport { selectPlayer } from '../../../redux/actions/togetherStatsActions';\nimport { SquadMemberRandomFact } from './SquadMemberRandomFact';\n\nexport class SquadMemberStats extends Component {\n  static propTypes = {\n    player: PropTypes.string.isRequired,\n    stats: PropTypes.object.isRequired,\n    mode: PropTypes.string.isRequired,\n    perspective: PropTypes.string.isRequired,\n    squad: PropTypes.array.isRequired\n  };\n\n  render() {\n    let { player, stats, mode, perspective, squad } = this.props;\n    const gameMode = mode + perspective;\n\n    if (_isEmpty(stats)) {\n      return '';\n    }\n\n    if (!squad.includes(player)) {\n      this.props.selectPlayer(squad[0]);\n      player = squad[0];\n    }\n\n    const badges = stats[gameMode].stats[player].badges;\n    const playerStats = stats[gameMode].stats[player];\n    const squadStats = stats[gameMode].stats.teamTotal;\n    const gamesPlayed = stats[gameMode].gamesPlayed;\n\n    return (\n      <div className=\"row  d-flex justify-content-center text-light \">\n        <div className=\"col-lg-8 col-md-10 col-12 text-center\">\n          <div className=\"bg-dark text-light border-secondary stat-card mb-5 rounded-bottom\">\n            <div className=\"card-body\">\n              <SquadMemberStatsHeader player={player} badges={badges} />\n              <Separator color=\"secondary\" length={10} margin={4} />\n              <div className=\"row\">\n                <div className=\"col-12\">\n                  <StatRow\n                    label=\"Kills\"\n                    playerStat={playerStats.kills}\n                    squadStat={squadStats.kills}\n                    type=\"total\"\n                  />\n                  <StatRow\n                    label=\"K/D\"\n                    playerStat={_round(playerStats.kills / gamesPlayed, 2)}\n                    squadStat={_round(squadStats.kills / (gamesPlayed * squad.length), 2)}\n                    type=\"avg\"\n                  />\n                  <StatRow\n                    label=\"Total Damage\"\n                    playerStat={_round(playerStats.damageDealt, 0)}\n                    squadStat={_round(squadStats.damageDealt, 0)}\n                    type=\"total\"\n                  />\n                  <StatRow\n                    label=\"Avg. Damage\"\n                    playerStat={_round(playerStats.damageDealt / gamesPlayed, 0)}\n                    squadStat={_round(squadStats.damageDealt / (gamesPlayed * squad.length), 0)}\n                    type=\"avg\"\n                  />\n\n                  <StatRow\n                    label=\"% Headshot Kills\"\n                    playerStat={_round((playerStats.headshotKills / playerStats.kills) * 100, 1)}\n                    squadStat={_round((squadStats.headshotKills / squadStats.kills) * 100, 1)}\n                    type=\"avg\"\n                    unit=\"%\"\n                  />\n                  <StatRow\n                    label=\"Longest Kill\"\n                    playerStat={_round(playerStats.longestKill, 0)}\n                    squadStat={_round(squadStats.longestKill, 0)}\n                    type=\"distance\"\n                    unit=\"m\"\n                    nokills={playerStats.kills === 0}\n                  />\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-12\">\n                  <Separator color=\"secondary\" length={10} margin={4} />\n                  <SquadMemberRandomFact player={player} stats={playerStats} rounds={gamesPlayed} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  player: state.squad.selectedPlayer,\n  stats: state.squad.stats,\n  mode: state.squad.mode,\n  perspective: state.squad.perspective,\n  squad: state.squad.membersFetched\n});\n\nconst mapDispatchToProps = {\n  selectPlayer\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SquadMemberStats);\n"]},"metadata":{},"sourceType":"module"}